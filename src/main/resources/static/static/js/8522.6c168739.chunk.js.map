{"version":3,"file":"static/js/8522.6c168739.chunk.js","mappings":"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","sources":["views/appointment/AppointmentCreate.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TextField, InputLabel, Select, MenuItem, Grid, Button, Autocomplete } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\nimport dayjs from 'dayjs';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\n\r\nfunction AppointmentCreate({ data, setAppointmentUpdateOpen, fetchAllAppointmentData }) {\r\n  const initialAppointment = data\r\n    ? {\r\n        ...data,\r\n        appointmentDateTime: data.appointmentDateTime ? dayjs(data.appointmentDateTime) : null\r\n      }\r\n    : {};\r\n  const [appointment, setAppointment] = useState(initialAppointment);\r\n  const [serviceList, setServiceList] = useState([]);\r\n  const [employeeList, setEmployeeList] = useState([]);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  useEffect(() => {\r\n    fetchAllServiceListData();\r\n    fetchAllEmployeeData();\r\n    return () => {\r\n      setAppointment({});\r\n      setServiceList([]);\r\n      setEmployeeList([]);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(data);\r\n    if (data) {\r\n      setAppointment({\r\n        ...data,\r\n        appointmentDateTime: data.appointmentDateTime ? dayjs(data.appointmentDateTime) : null\r\n      });\r\n    } else {\r\n      setAppointment({});\r\n    }\r\n  }, [data]);\r\n\r\n  const fetchAllServiceListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service');\r\n      setServiceList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllEmployeeData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/employee');\r\n      setEmployeeList(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isAppointmentComplete() {\r\n    return appointment.customerName && appointment.phone && appointment.service && appointment.appointmentDateTime;\r\n  }\r\n\r\n  const saveAppointment = async (payload) => {\r\n    const finalPayload = {\r\n      ...payload,\r\n      status: payload.status ? payload.status : 'SCHEDULED',\r\n      appointmentDateTime: dayjs(payload.appointmentDateTime).format('YYYY-MM-DDTHH:mm:ss')\r\n    };\r\n    //console.log(JSON.stringify(finalPayload));\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/appointments', finalPayload);\r\n      if (fetchAllAppointmentData) {\r\n        fetchAllAppointmentData();\r\n      }\r\n      if (setAppointmentUpdateOpen) {\r\n        setAppointmentUpdateOpen(false);\r\n      }\r\n      setAlertMess('Created appointment for ' + data.customerName);\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    const updatedData = { ...appointment, [field]: value };\r\n    setAppointment(updatedData);\r\n  };\r\n\r\n  // const handleDateTimeChange = (dateTime) => {\r\n  //   setAppointment({ ...appointment, appointmentDateTime: dateTime.format('YYYY-MM-DDTHH:mm:ss') });\r\n  // };\r\n  const handleDateTimeChange = (dateTime) => {\r\n    setAppointment({ ...appointment, appointmentDateTime: dateTime });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Enter Appointment Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Customer Name\"\r\n              required\r\n              variant=\"standard\"\r\n              value={appointment.customerName || ''}\r\n              onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Phone\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={appointment.phone || ''}\r\n              onChange={(e) => handleInputChange('phone', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Autocomplete\r\n              options={serviceList}\r\n              getOptionLabel={(option) => option.desc}\r\n              value={serviceList.find((option) => option.desc === appointment.service) || null} // Set initial value\r\n              onChange={(event, newValue) => {\r\n                handleInputChange('service', newValue ? newValue.desc : ''); // Store `desc` in state\r\n              }}\r\n              renderInput={(params) => <TextField {...params} label=\"Select Service\" variant=\"outlined\" fullWidth />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <DateTimePicker\r\n              label=\"Appointment Date & Time\"\r\n              value={appointment.appointmentDateTime}\r\n              onChange={handleDateTimeChange}\r\n              shouldDisableDate={(date) => date.day() === 0}\r\n              renderInput={(params) => <TextField {...params} fullWidth />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <InputLabel id=\"demo-select-small\">Status</InputLabel>\r\n            <Select\r\n              labelId=\"demo-select-small\"\r\n              id=\"demo-select-small\"\r\n              value={appointment.status || 'SCHEDULED'}\r\n              label=\"Status\"\r\n              onChange={(e) => handleInputChange('status', e.target.value)}\r\n            >\r\n              {['SCHEDULED', 'IN-PROGRESS', 'COMPLETED', 'CANCELLED'].map((option) => (\r\n                <MenuItem key={option} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <InputLabel id=\"demo-select-small\">Staff</InputLabel>\r\n            <Select\r\n              labelId=\"demo-select-small\"\r\n              id=\"demo-select-small\"\r\n              value={appointment.staffName || ''}\r\n              label=\"Staff\"\r\n              onChange={(e) => handleInputChange('staffName', e.target.value)}\r\n            >\r\n              {employeeList.map((option) => (\r\n                <MenuItem key={option.id} value={option.name}>\r\n                  {option.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Description\"\r\n              variant=\"standard\" // Optional: \"standard\" works, but \"outlined\" improves visibility\r\n              multiline\r\n              fullWidth\r\n              value={appointment.description || ''}\r\n              onChange={(e) => handleInputChange('description', e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      <br></br>\r\n      <div className=\"content\">\r\n        {isAppointmentComplete() && (\r\n          <Button variant=\"contained\" color=\"error\" onClick={() => saveAppointment(appointment)}>\r\n            Add/Update Appointment\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nAppointmentCreate.propTypes = {\r\n  data: PropTypes.object,\r\n  setAppointmentUpdateOpen: PropTypes.func,\r\n  fetchAllAppointmentData: PropTypes.func\r\n};\r\nexport default AppointmentCreate;\r\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"\n}), 'KeyboardArrowLeft');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"\n}), 'KeyboardArrowRight');"],"names":["_ref","data","setAppointmentUpdateOpen","fetchAllAppointmentData","initialAppointment","appointmentDateTime","dayjs","appointment","setAppointment","useState","serviceList","setServiceList","employeeList","setEmployeeList","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","fetchAllServiceListData","fetchAllEmployeeData","console","log","async","getRequest","err","message","error","handleInputChange","field","value","updatedData","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","TextField","label","required","variant","customerName","onChange","e","target","phone","Autocomplete","options","getOptionLabel","option","desc","find","service","event","newValue","renderInput","params","fullWidth","DateTimePicker","dateTime","shouldDisableDate","date","day","InputLabel","id","Select","labelId","status","map","MenuItem","staffName","name","multiline","description","className","Button","color","onClick","finalPayload","payload","format","postRequest","saveAppointment","AlertDialog","createSvgIcon","d"],"sourceRoot":""}