{"version":3,"file":"static/js/8143.6934f61c.chunk.js","mappings":"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","sources":["views/job/JobCardFastCreate.js","views/job/JobServiceUpdate.js","views/job/JobSparesUpdate.js","../node_modules/@mui/material/TableContainer/tableContainerClasses.js","../node_modules/@mui/material/TableContainer/TableContainer.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Grid, TextField, Button } from '@mui/material';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport JobServiceUpdate from './JobServiceUpdate';\nimport JobSparesUpdate from './JobSparesUpdate';\nimport AlertDialog from 'views/utilities/AlertDialog';\nimport { postRequest } from 'utils/fetchRequest';\n\nconst JobCardFastCreate = () => {\n  const [fastJobCard, setFastJobCard] = useState({});\n  const [jobServiceInfo, setJobServiceInfo] = useState([]);\n  const [jobSparesInfo, setJobSparesInfo] = useState([]);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMess, setAlertMess] = useState('');\n  const [alertColor, setAlertColor] = useState('');\n\n  // Refs for each field\n  const ownerNameRef = useRef();\n  const ownerPhoneRef = useRef();\n  const ownerAddressRef = useRef();\n  const vehicleRegNoRef = useRef();\n  const vehicleNameRef = useRef();\n  const kiloMetersRef = useRef();\n  const jobServiceFirstInputRef = useRef();\n\n  const handleInputChange = (field, value) => {\n    setFastJobCard({ ...fastJobCard, [field]: value });\n  };\n\n  const handleEnter = (e, nextRef) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      nextRef?.current?.focus();\n    }\n  };\n\n  const handleClose = () => {\n    setFastJobCard({});\n    setJobSparesInfo([]);\n    setJobServiceInfo([]);\n  };\n\n  const isUserDetailsComplete = () => fastJobCard.ownerName && fastJobCard.ownerAddress && fastJobCard.ownerPhoneNumber;\n\n  const isCarDetailsComplete = () => fastJobCard.vehicleRegNo && fastJobCard.vehicleName;\n\n  const isJobComplete = () => isUserDetailsComplete() && isCarDetailsComplete();\n\n  const submitFastJobCard = async () => {\n    const payload = {\n      ...fastJobCard,\n      jobServiceInfo,\n      jobSparesInfo\n    };\n    try {\n      await postRequest(process.env.REACT_APP_API_URL + '/jobCard/fastjobCard', payload);\n      handleClose();\n      setAlertMess('Jobcard created for ' + payload.vehicleRegNo);\n      setAlertColor('success');\n      setShowAlert(true);\n    } catch (err) {\n      console.log(err.message);\n      handleClose();\n      setAlertMess(err.message);\n      setAlertColor('info');\n      setShowAlert(true);\n    }\n  };\n\n  return (\n    <>\n      <MainCard title=\"Job Card Details\">\n        <Grid container direction=\"row\" spacing={gridSpacing}>\n          <Grid item xs={3}>\n            <TextField\n              inputRef={ownerNameRef}\n              label=\"Owner Name\"\n              required\n              variant=\"outlined\"\n              value={fastJobCard.ownerName || ''}\n              onChange={(e) => handleInputChange('ownerName', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, ownerPhoneRef)}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              inputRef={ownerPhoneRef}\n              label=\"Owner PhoneNumber\"\n              required\n              variant=\"outlined\"\n              value={fastJobCard.ownerPhoneNumber || ''}\n              onChange={(e) => handleInputChange('ownerPhoneNumber', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, ownerAddressRef)}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              inputRef={ownerAddressRef}\n              label=\"Owner Address\"\n              required\n              fullWidth\n              variant=\"outlined\"\n              value={fastJobCard.ownerAddress || ''}\n              onChange={(e) => handleInputChange('ownerAddress', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, vehicleRegNoRef)}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              inputRef={vehicleRegNoRef}\n              label=\"Vehicle Reg. No.\"\n              required\n              variant=\"outlined\"\n              value={fastJobCard.vehicleRegNo || ''}\n              onChange={(e) => handleInputChange('vehicleRegNo', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, vehicleNameRef)}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              inputRef={vehicleNameRef}\n              label=\"Vehicle Name\"\n              required\n              variant=\"outlined\"\n              value={fastJobCard.vehicleName || ''}\n              onChange={(e) => handleInputChange('vehicleName', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, kiloMetersRef)}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              inputRef={kiloMetersRef}\n              label=\"Vehicle K.Ms\"\n              variant=\"outlined\"\n              value={fastJobCard.kiloMeters || ''}\n              onChange={(e) => handleInputChange('kiloMeters', e.target.value)}\n              onKeyDown={(e) => handleEnter(e, jobServiceFirstInputRef)} // No next field here\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <JobServiceUpdate data={jobServiceInfo} updateData={setJobServiceInfo} firstInputRef={jobServiceFirstInputRef} />\n          </Grid>\n          <Grid item xs={12}>\n            <JobSparesUpdate data={jobSparesInfo} updateData={setJobSparesInfo} />\n          </Grid>\n          {isJobComplete() && (\n            <Grid item xs={12}>\n              <Button variant=\"contained\" color=\"error\" onClick={submitFastJobCard}>\n                Save JobCard\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </MainCard>\n\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\n    </>\n  );\n};\n\nexport default JobCardFastCreate;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst JobServiceUpdate = ({ data, updateData, firstInputRef }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const discountRole = ['ADMIN'];\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n  const isAuthorizedForDiscount = roles.some((role) => discountRole.includes(role));\r\n\r\n  const [serviceCategoryList, setServiceCategoryList] = React.useState([]);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [allService, setAllService] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    fetchAllServiceCategoryListData();\r\n    fetchAllServiceData();\r\n    return () => {\r\n      setServiceCategoryList([]);\r\n      setOptions([]);\r\n      setAllService([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllServiceCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service/serviceCategory');\r\n      setServiceCategoryList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllServiceData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service');\r\n      setAllService(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchOptions = async (value) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/service/findServiceInventoryWithFilter', value);\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (index, column, value) => {\r\n    const newRows = [...data];\r\n    newRows[index][column] = value;\r\n    updateData(newRows);\r\n  };\r\n\r\n  const addAdditionalRows = () => {\r\n    const newRows = [\r\n      {\r\n        sparesId: '',\r\n        category: '',\r\n        sparesAndLabour: '',\r\n        qty: '',\r\n        rate: '',\r\n        discount: '',\r\n        amount: ''\r\n      }\r\n    ];\r\n    updateData((prevRows) => [...prevRows, ...newRows]);\r\n  };\r\n\r\n  const handleRowDelete = (rowIndex) => {\r\n    const newRows = [...data];\r\n    newRows.splice(rowIndex, 1);\r\n    if (newRows.length > 0) {\r\n      updateData(newRows);\r\n    } else {\r\n      updateData([\r\n        {\r\n          sparesId: '',\r\n          category: '',\r\n          sparesAndLabour: '',\r\n          qty: '',\r\n          rate: '',\r\n          discount: '',\r\n          amount: ''\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleCategoryTypeChange = (value) => {\r\n    const serviceFilter = {\r\n      categoryList: [value]\r\n    };\r\n    fetchOptions(serviceFilter);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Job Service Information\">\r\n      <div style={{ overflowX: 'auto' }}>\r\n        <TableContainer>\r\n          <Table style={{ minWidth: isMobile ? '600px' : '1000px' }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ width: '20%' }}>Category</TableCell>\r\n                <TableCell sx={{ width: '30%' }}>Spares</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Qty</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Rate</TableCell>\r\n                {isAuthorizedForDiscount && <TableCell sx={{ width: '10%' }}>Discount</TableCell>}\r\n                <TableCell sx={{ width: '10%' }}>Amount</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data.map((row, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell sx={{ width: '20%' }}>\r\n                    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                      <InputLabel></InputLabel>\r\n                      <Select\r\n                        fullWidth\r\n                        value={row?.category || ''}\r\n                        onChange={(e) => {\r\n                          handleCategoryTypeChange(e.target.value);\r\n                          handleInputChange(index, 'category', e.target.value);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            document.querySelector(`#spares-input-${index}`)?.focus();\r\n                          }\r\n                        }}\r\n                      >\r\n                        {serviceCategoryList.map((option) => (\r\n                          <MenuItem key={option.id} value={option.category}>\r\n                            {option.category}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '30%' }}>\r\n                    <Autocomplete\r\n                      options={options.filter((option) => !data.some((r) => r.sparesId === option.id))}\r\n                      getOptionLabel={(option) => option.desc}\r\n                      style={{ width: 300 }}\r\n                      value={allService.find((option) => option.desc === row.sparesAndLabour) || null}\r\n                      isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                      onChange={(event, newValue) => {\r\n                        if (!newValue) return;\r\n                        handleInputChange(index, 'sparesAndLabour', newValue.desc);\r\n                        handleInputChange(index, 'rate', newValue.amount);\r\n                        handleInputChange(index, 'amount', newValue.amount * row?.qty - row?.discount || 0);\r\n                        handleInputChange(index, 'sparesId', newValue.id);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          id={`spares-input-${index}`}\r\n                          label=\"Search Service\"\r\n                          disabled={!!row.sparesId}\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === 'Enter') {\r\n                              e.preventDefault();\r\n                              document.querySelector(`#qty-input-${index}`)?.focus();\r\n                            }\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id={`qty-input-${index}`}\r\n                      value={row?.qty || ''}\r\n                      onChange={(e) => {\r\n                        const val = e.target.value;\r\n                        handleInputChange(index, 'qty', val);\r\n                        handleInputChange(index, 'amount', val * row?.rate - row?.discount || 0);\r\n                      }}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                          e.preventDefault();\r\n                          if (isAuthorizedForDiscount) {\r\n                            document.querySelector(`#discount-input-${index}`)?.focus();\r\n                          } else {\r\n                            firstInputRef?.current?.focus(); // fallback\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField fullWidth value={row?.rate || ''} disabled />\r\n                  </TableCell>\r\n                  {isAuthorizedForDiscount && (\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id={`discount-input-${index}`}\r\n                        value={row?.discount || ''}\r\n                        onChange={(e) => {\r\n                          const val = Number(e.target.value) || 0;\r\n                          handleInputChange(index, 'discount', val);\r\n                          handleInputChange(index, 'amount', Number(row?.rate * row?.qty) - val || 0);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            firstInputRef?.current?.focus(); // Jump to \"Add Row\"\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  )}\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField fullWidth value={row?.amount || ''} disabled />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(index)}>\r\n                      Delete\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n\r\n      <Grid item xs={12}>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"error\"\r\n          onClick={addAdditionalRows}\r\n          ref={firstInputRef} // 👈 ref to allow focus from kiloMeters field\r\n        >\r\n          Add Row\r\n        </Button>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nJobServiceUpdate.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  updateData: PropTypes.func.isRequired,\r\n  firstInputRef: PropTypes.any // 👈 added prop\r\n};\r\n\r\nexport default JobServiceUpdate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Grid } from '@mui/material';\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n//import { gridSpacing } from 'store/constant';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst JobSparesUpdate = ({ data, updateData }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm')); // Check for small screens\r\n\r\n  const [sparesCategoryList, setSparesCategoryList] = React.useState([]);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [allSpares, setAllSpares] = React.useState([]);\r\n\r\n  const discountRole = ['ADMIN'];\r\n\r\n  // Get logged-in user's roles\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n\r\n  // Check if user is authorized to see the \"DISCOUNT\" column\r\n  const isAuthorizedForDiscount = roles.some((role) => discountRole.includes(role));\r\n\r\n  React.useEffect(() => {\r\n    fetchAllSparesCategoryListData();\r\n    fetchAllSparesData();\r\n    return () => {\r\n      setSparesCategoryList([]);\r\n      setOptions([]);\r\n      setAllSpares([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllSparesCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares/sparesCategory');\r\n      setSparesCategoryList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllSparesData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares');\r\n      setAllSpares(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchOptions = async (value) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/spares/findSparesInventoryWithFilter', value);\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (sparesId, column, value) => {\r\n    const newRows = [...data];\r\n\r\n    // Find the row based on sparesId\r\n    const rowIndex = newRows.findIndex((row) => row.sparesId === sparesId);\r\n    newRows[rowIndex][column] = value;\r\n    // If the row was newly added (action === 'ADD'), remove it entirely\r\n    if (newRows[rowIndex].action !== 'ADD') {\r\n      newRows[rowIndex].action = 'MODIFY';\r\n    }\r\n\r\n    updateData(newRows); // Update the state\r\n  };\r\n\r\n  // const handleInputChange = (sparesId, column, value) => {\r\n  //   const newRows = data.map((row) =>\r\n  //     row.sparesId === sparesId ? { ...row, [column]: value, action: row.action !== 'ADD' ? 'MODIFY' : row.action } : row\r\n  //   );\r\n  //   updateData(newRows);\r\n  // };\r\n\r\n  // Add new spare rows with action set to ADD\r\n  // const addAdditionalRows = () => {\r\n  //   console.log('Data before add ');\r\n  //   console.log(JSON.stringify(data));\r\n  //   const newRows = [...Array(1)].map(() => ({\r\n  //     sparesId: '',\r\n  //     category: '',\r\n  //     sparesAndLabour: '',\r\n  //     qty: '',\r\n  //     rate: '',\r\n  //     amount: '',\r\n  //     action: 'ADD'\r\n  //   }));\r\n  //   updateData((prevRows) => [...prevRows, ...newRows]);\r\n  //   console.log('Data post Add ');\r\n  //   console.log(JSON.stringify(data));\r\n  // };\r\n\r\n  const addAdditionalRows = () => {\r\n    const newRows = [...Array(1)].map(() => ({\r\n      sparesId: '',\r\n      category: '',\r\n      sparesAndLabour: '',\r\n      qty: '',\r\n      rate: '',\r\n      discount: '',\r\n      amount: '',\r\n      action: 'ADD'\r\n    }));\r\n    updateData((prevRows) => [...prevRows, ...newRows]);\r\n  };\r\n\r\n  // Handle row deletion by marking action as DELETE\r\n  // const handleRowDelete = (rowIndex) => {\r\n  //   const newRows = [...data];\r\n\r\n  //   // If the spare is newly added, just remove the row\r\n  //   if (newRows[rowIndex].action === 'ADD') {\r\n  //     newRows.splice(rowIndex, 1);\r\n  //   } else {\r\n  //     // Otherwise, mark the action as DELETE\r\n  //     newRows[rowIndex].action = 'DELETE';\r\n  //   }\r\n\r\n  //   updateData(newRows);\r\n  // };\r\n\r\n  const handleRowDelete = (sparesId) => {\r\n    const newRows = [...data];\r\n\r\n    // Find the row based on sparesId\r\n    const rowIndex = newRows.findIndex((row) => row.sparesId === sparesId);\r\n\r\n    // If the row was newly added (action === 'ADD'), remove it entirely\r\n    if (newRows[rowIndex].action === 'ADD') {\r\n      newRows.splice(rowIndex, 1); // Remove the row from the array\r\n    } else {\r\n      // Otherwise, mark the row as deleted\r\n      newRows[rowIndex].action = 'DELETE';\r\n    }\r\n\r\n    updateData(newRows); // Update the state\r\n  };\r\n\r\n  const handleCategoryTypeChange = (value) => {\r\n    let myArray = [value];\r\n    const sparesFilter = {\r\n      categoryList: myArray\r\n    };\r\n    fetchOptions(sparesFilter);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MainCard title=\"Job Spares Information\">\r\n        {/* <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={12}> */}\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer>\r\n            <Table style={{ minWidth: isMobile ? '600px' : '1000px' }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ width: '20%' }}>Category</TableCell>\r\n                  <TableCell sx={{ width: '30%' }}>Spares</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Qty</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Rate</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Discount</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Amount</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data\r\n                  .filter((row) => row.action !== 'DELETE') // Hide rows marked for deletion\r\n                  .map((row) => (\r\n                    <TableRow key={row.sparesId || row.tempId}>\r\n                      <TableCell sx={{ width: '20%' }}>\r\n                        <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                          <InputLabel id=\"demo-simple-select-standard-label\"></InputLabel>\r\n                          <Select\r\n                            fullWidth\r\n                            labelId=\"demo-simple-select-standard-label\"\r\n                            id=\"demo-simple-select-standard-label\"\r\n                            value={row?.category || ''}\r\n                            label=\"Category Type\"\r\n                            sx={{\r\n                              '& .MuiSelect-select': {\r\n                                color: 'black' // Change to your desired color\r\n                              }\r\n                            }}\r\n                            onChange={(e) => {\r\n                              handleCategoryTypeChange(e.target.value);\r\n                              handleInputChange(row.sparesId, 'category', e.target.value);\r\n                            }}\r\n                          >\r\n                            {sparesCategoryList.map((option) => (\r\n                              <MenuItem key={option.id} value={option.category}>\r\n                                {option.category}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '30%' }}>\r\n                        <Autocomplete\r\n                          options={options.filter((option) => !data.some((row) => row.sparesId === option.id))} // Filter out already added spares\r\n                          getOptionLabel={(option) => option.desc}\r\n                          style={{ width: 300 }}\r\n                          //inputValue={row?.sparesAndLabour || ''}\r\n                          //onInputChange={handleInputChangeFilter}\r\n                          //value={row || ''}\r\n                          value={allSpares.find((option) => option.desc === row.sparesAndLabour) || null}\r\n                          isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                          onChange={(event, newValue) => {\r\n                            //console.log('new value is ' + JSON.stringify(newValue));\r\n                            //setChoosenSpares(newValue);\r\n                            handleInputChange(row.sparesId, 'sparesAndLabour', newValue.desc);\r\n                            handleInputChange(row.sparesId, 'rate', newValue.sellRate);\r\n                            handleInputChange(row.sparesId, 'amount', newValue.sellRate * row?.qty - row?.discount || 0);\r\n                            handleInputChange(row.sparesId, 'sparesId', newValue.id);\r\n                          }}\r\n                          renderInput={(params) => <TextField {...params} label=\"Search Spares\" disabled={!!row.sparesId} />}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          value={row?.qty || ''}\r\n                          onChange={(e) => {\r\n                            const val = e.target.value;\r\n                            handleInputChange(row.sparesId, 'qty', val);\r\n                            handleInputChange(row.sparesId, 'amount', val * row?.rate - row?.discount || 0);\r\n                          }}\r\n                          onBlur={(e) => {\r\n                            const val = e.target.value;\r\n                            if (Number(val) <= 0) {\r\n                              alert('Quantity cannot be 0. Please delete the row if you want to remove the spare.');\r\n                              handleInputChange(row.sparesId, 'qty', ''); // Reset the value if needed\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled\r\n                          value={row?.rate || ''}\r\n                          onChange={(e) => handleInputChange(row.sparesId, 'rate', e.target.value)}\r\n                        />\r\n                      </TableCell>\r\n                      {isAuthorizedForDiscount && (\r\n                        <TableCell sx={{ width: '10%' }}>\r\n                          <TextField\r\n                            fullWidth\r\n                            value={row?.discount || ''}\r\n                            onChange={(e) => {\r\n                              const val = Number(e.target.value) || 0;\r\n                              handleInputChange(row.sparesId, 'discount', val);\r\n                              handleInputChange(row.sparesId, 'amount', Number(row?.rate * row?.qty) - val || 0);\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                      )}\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          value={row?.amount || ''}\r\n                          disabled\r\n                          onChange={(e) => handleInputChange(row.sparesId, 'amount', e.target.value)}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(row.sparesId)}>\r\n                          Delete\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n        <Grid item xs={12}>\r\n          <br></br>\r\n          <Button variant=\"contained\" color=\"error\" onClick={addAdditionalRows}>\r\n            Add Row\r\n          </Button>\r\n        </Grid>\r\n        {/* </Grid>\r\n        </Grid> */}\r\n      </MainCard>\r\n    </>\r\n  );\r\n};\r\n\r\nJobSparesUpdate.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  updateData: PropTypes.func.isRequired\r\n};\r\nexport default JobSparesUpdate;\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableContainerUtilityClass } from './tableContainerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, _extends({\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;"],"names":["JobCardFastCreate","fastJobCard","setFastJobCard","useState","jobServiceInfo","setJobServiceInfo","jobSparesInfo","setJobSparesInfo","showAlert","setShowAlert","alertMess","setAlertMess","alertColor","setAlertColor","ownerNameRef","useRef","ownerPhoneRef","ownerAddressRef","vehicleRegNoRef","vehicleNameRef","kiloMetersRef","jobServiceFirstInputRef","handleInputChange","field","value","handleEnter","e","nextRef","_nextRef$current","key","preventDefault","current","focus","handleClose","_jsxs","_Fragment","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","TextField","inputRef","label","required","variant","ownerName","onChange","target","onKeyDown","ownerPhoneNumber","fullWidth","ownerAddress","vehicleRegNo","vehicleName","kiloMeters","JobServiceUpdate","data","updateData","firstInputRef","JobSparesUpdate","Button","color","onClick","async","payload","postRequest","err","console","log","message","AlertDialog","_ref","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","discountRole","isAuthorizedForDiscount","JSON","parse","localStorage","getItem","some","role","includes","serviceCategoryList","setServiceCategoryList","React","options","setOptions","allService","setAllService","fetchAllServiceCategoryListData","fetchAllServiceData","getRequest","index","column","newRows","handleCategoryTypeChange","fetchOptions","categoryList","style","overflowX","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","sx","width","TableBody","map","row","FormControl","m","InputLabel","Select","category","_document$querySelect","document","querySelector","option","MenuItem","id","Autocomplete","filter","r","sparesId","getOptionLabel","desc","find","sparesAndLabour","isOptionEqualToValue","event","newValue","amount","qty","discount","renderInput","params","disabled","_document$querySelect2","val","rate","_document$querySelect3","_firstInputRef$curren","Number","_firstInputRef$curren2","rowIndex","splice","length","handleRowDelete","addAdditionalRows","prevRows","ref","sparesCategoryList","setSparesCategoryList","allSpares","setAllSpares","fetchAllSparesCategoryListData","fetchAllSparesData","findIndex","action","labelId","sellRate","onBlur","alert","tempId","Array","getTableContainerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableContainerRoot","styled","name","overridesResolver","props","styles","root","inProps","useThemeProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}