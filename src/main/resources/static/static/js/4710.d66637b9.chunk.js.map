{"version":3,"file":"static/js/4710.d66637b9.chunk.js","mappings":"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","sources":["views/expense/ExpenseCreate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TextField, InputLabel, Select, MenuItem, Grid, Button } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nfunction ExpenseCreate({ data, setExpenseUpdateOpen, fetchAllExpenseData }) {\r\n  const [expenseDetails, setExpenseDetails] = useState(data || {});\r\n  const [expenseCategoryList, setExpenseCategoryList] = useState([]);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMess, setAlertMess] = useState('');\r\n  const [alertColor, setAlertColor] = useState('');\r\n\r\n  const paymentMode = ['CASH', 'UPI', 'BANK TRANSFER'];\r\n\r\n  useEffect(() => {\r\n    fetchAllExpenseCategoryListData();\r\n\r\n    return () => {\r\n      setExpenseDetails({});\r\n      setExpenseCategoryList([]);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setExpenseDetails(data || {});\r\n  }, [data]);\r\n\r\n  const fetchAllExpenseCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/expense/expenseCategory');\r\n      setExpenseCategoryList(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isExpenseComplete() {\r\n    return expenseDetails.type && expenseDetails.desc && expenseDetails.paymentMode && expenseDetails.expenseAmount;\r\n  }\r\n\r\n  const saveExpense = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/expense', payload);\r\n      if (fetchAllExpenseData) {\r\n        fetchAllExpenseData();\r\n      }\r\n      if (setExpenseUpdateOpen) {\r\n        setExpenseUpdateOpen(false);\r\n      }\r\n      setAlertMess(data.desc + ' added successfully ');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    const updatedData = { ...expenseDetails, [field]: value };\r\n    setExpenseDetails(updatedData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Enter Expense Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Expense Category\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-select-small\"\r\n              id=\"demo-select-small\"\r\n              value={expenseDetails.type || ''}\r\n              label=\"Category Type\"\r\n              onChange={(e) => handleInputChange('type', e.target.value)}\r\n            >\r\n              {expenseCategoryList.map((option) => (\r\n                <MenuItem key={option.id} value={option.category}>\r\n                  {option.category}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Desc\"\r\n              required\r\n              variant=\"standard\"\r\n              value={expenseDetails.desc || ''}\r\n              onChange={(e) => handleInputChange('desc', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Payment Mode\r\n            </InputLabel>\r\n            <TextField\r\n              select\r\n              variant=\"outlined\"\r\n              required\r\n              value={expenseDetails.paymentMode || ''}\r\n              onChange={(e) => handleInputChange('paymentMode', e.target.value)}\r\n            >\r\n              {paymentMode.map((mode) => (\r\n                <MenuItem key={mode} value={mode}>\r\n                  {mode}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Amount\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={expenseDetails.expenseAmount || ''}\r\n              onChange={(e) => handleInputChange('expenseAmount', parseFloat(e.target.value) || 0)}\r\n              type=\"number\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Comment\"\r\n              variant=\"standard\"\r\n              value={expenseDetails.comment || ''}\r\n              onChange={(e) => handleInputChange('comment', e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      <br></br>\r\n      <div className=\"content\">\r\n        {isExpenseComplete() && (\r\n          <Button variant=\"contained\" color=\"error\" onClick={() => saveExpense(expenseDetails)}>\r\n            Add/Update Expense\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nExpenseCreate.propTypes = {\r\n  data: PropTypes.object,\r\n  setExpenseUpdateOpen: PropTypes.func,\r\n  fetchAllExpenseData: PropTypes.func\r\n};\r\nexport default ExpenseCreate;\r\n"],"names":["_ref","data","setExpenseUpdateOpen","fetchAllExpenseData","expenseDetails","setExpenseDetails","useState","expenseCategoryList","setExpenseCategoryList","showAlert","setShowAlert","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","fetchAllExpenseCategoryListData","async","getRequest","err","console","error","message","handleInputChange","field","value","updatedData","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","InputLabel","id","required","Select","labelId","type","label","onChange","e","target","map","option","MenuItem","category","TextField","variant","desc","select","paymentMode","mode","expenseAmount","parseFloat","comment","className","Button","color","onClick","postRequest","payload","log","saveExpense","AlertDialog"],"sourceRoot":""}