{"version":3,"file":"static/js/9940.024049be.chunk.js","mappings":"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","sources":["views/appointment/AppointmentCalendar.js","views/appointment/AllAppointment.js"],"sourcesContent":["import { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst AppointmentCalendar = ({ appointments }) => {\r\n  const events = appointments.map((appt) => ({\r\n    title: `${appt.customerName} - ${appt.service}`,\r\n    start: new Date(appt.appointmentDateTime),\r\n    end: new Date(new Date(appt.appointmentDateTime).getTime() + 60 * 60 * 1000) // 1-hour event\r\n  }));\r\n\r\n  return (\r\n    <div style={{ height: 600 }}>\r\n      <Calendar localizer={localizer} events={events} startAccessor=\"start\" endAccessor=\"end\" views={['month', 'week', 'day', 'agenda']} />\r\n    </div>\r\n  );\r\n};\r\n\r\nAppointmentCalendar.propTypes = {\r\n  appointments: PropTypes.array\r\n};\r\nexport default AppointmentCalendar;\r\n","import React, { useMemo, useState, useEffect, lazy } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport {\r\n  createTheme,\r\n  ThemeProvider,\r\n  useTheme,\r\n  IconButton,\r\n  Tooltip,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Button\r\n} from '@mui/material';\r\nimport { Edit } from '@mui/icons-material';\r\nimport { gridSpacing } from 'store/constant';\r\nimport Loadable from 'ui-component/Loadable';\r\nimport { getRequest } from 'utils/fetchRequest';\r\nimport AppointmentCalendar from './AppointmentCalendar';\r\n\r\nconst AppointmentCreate = Loadable(lazy(() => import('views/appointment/AppointmentCreate')));\r\n\r\nconst AllEmployee = () => {\r\n  const [data, setData] = useState([]);\r\n  const [appointment, setAppointment] = useState({});\r\n  const [appointmentUpdateOpen, setAppointmentUpdateOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllAppointmentData();\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    setAppointmentUpdateOpen(false);\r\n  };\r\n\r\n  const fetchAllAppointmentData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/appointments');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'customerName', //access nested data with dot notation\r\n        header: 'Name',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'phone',\r\n        header: 'Phone',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'appointmentDateTime',\r\n        header: 'AppointmentTime',\r\n        size: 200\r\n      },\r\n      {\r\n        accessorKey: 'service',\r\n        header: 'Service',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'description',\r\n        header: 'Description',\r\n        size: 200\r\n      },\r\n      {\r\n        accessorKey: 'staffName',\r\n        header: 'Staff',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'status',\r\n        header: 'Status',\r\n        size: 100,\r\n        filterVariant: 'multi-select'\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#e2d7d5';\r\n  const color2 = '#ab9ec4';\r\n\r\n  return (\r\n    <div>\r\n      <AppointmentCalendar appointments={data} />\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          enableFacetedValues\r\n          editingMode=\"modal\"\r\n          enableEditing\r\n          muiTablePaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              borderRadius: '0',\r\n              //backgroundColor: \"#344767\",\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          renderRowActions={({ row }) => (\r\n            <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n              <Tooltip arrow placement=\"left\" title=\"Update Appointment Info\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    setAppointmentUpdateOpen(false);\r\n                    console.log(row.original);\r\n                    setAppointment(row.original);\r\n                    setAppointmentUpdateOpen(true);\r\n                  }}\r\n                >\r\n                  <Edit />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n        />{' '}\r\n      </ThemeProvider>\r\n      <br></br>\r\n      <Dialog open={appointmentUpdateOpen} onClose={handleClose} aria-labelledby=\"data-row-dialog-title\" fullWidth maxWidth=\"lg\">\r\n        <DialogContent dividers style={{ backgroundColor: 'white', color: 'black' }}>\r\n          {' '}\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                  <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h2\">{'Updating Appointment: ' + appointment.customerName}</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <AppointmentCreate\r\n                    data={appointment}\r\n                    setAppointmentUpdateOpen={setAppointmentUpdateOpen}\r\n                    fetchAllAppointmentData={fetchAllAppointmentData}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllEmployee;\r\n"],"names":["localizer","momentLocalizer","moment","_ref","appointments","events","map","appt","title","customerName","service","start","Date","appointmentDateTime","end","getTime","_jsx","style","height","children","Calendar","startAccessor","endAccessor","views","AppointmentCreate","Loadable","lazy","AllEmployee","data","setData","useState","appointment","setAppointment","appointmentUpdateOpen","setAppointmentUpdateOpen","useEffect","fetchAllAppointmentData","handleClose","async","getRequest","err","console","error","message","columns","useMemo","accessorKey","header","size","filterVariant","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","_jsxs","AppointmentCalendar","ThemeProvider","theme","MaterialReactTable","enableFacetedValues","editingMode","enableEditing","muiTablePaperProps","elevation","sx","borderRadius","renderRowActions","row","Box","display","gap","Tooltip","arrow","placement","IconButton","onClick","log","original","Edit","Dialog","open","onClose","fullWidth","maxWidth","DialogContent","dividers","backgroundColor","Grid","container","spacing","gridSpacing","item","xs","Divider","Typography","variant","DialogActions","Button"],"sourceRoot":""}