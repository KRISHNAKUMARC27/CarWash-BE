{"version":3,"file":"static/js/8826.aee2ea87.chunk.js","mappings":"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","sources":["views/spares/SparesCategory.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button, TextField, Grid, IconButton, Tooltip } from '@mui/material';\r\nimport { Edit, Delete } from '@mui/icons-material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, deleteRequest, postRequest, putRequestNotStringify } from 'utils/fetchRequest';\r\n\r\nfunction SparesCategory() {\r\n  const [sparesCategory, setSparesCategory] = useState({});\r\n  const [sparesCategoryList, setSparesCategoryList] = useState([]);\r\n  const [oldCategory, setOldCategory] = useState('');\r\n  const [newCategory, setNewCategory] = useState('');\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  useEffect(() => {\r\n    fetchAllSparesCategoryListData();\r\n\r\n    return () => {\r\n      setSparesCategory({});\r\n      setSparesCategoryList([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllSparesCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares/sparesCategory');\r\n      setSparesCategoryList(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isSparesCategoryComplete() {\r\n    return sparesCategory.category;\r\n  }\r\n\r\n  const submitSparesCategory = () => {\r\n    const sparesCat = {\r\n      category: sparesCategory.category\r\n    };\r\n    saveSparesCategory(sparesCat);\r\n  };\r\n\r\n  const saveSparesCategory = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/spares/saveSparesCategory', payload);\r\n      setAlertMess('SparesCategory ' + data.category + ' created successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setSparesCategory({});\r\n      fetchAllSparesCategoryListData();\r\n      console.log(data);\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (event) => {\r\n    const updatedData = { ...sparesCategory, category: event.target.value };\r\n    setSparesCategory(updatedData);\r\n  };\r\n\r\n  const handleRowDelete = async (rowIndex) => {\r\n    try {\r\n      const data = await deleteRequest(process.env.REACT_APP_API_URL + '/spares/sparesCategory/' + rowIndex);\r\n      setAlertMess('SparesCategory ' + data.category + ' deleted successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      fetchAllSparesCategoryListData();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (oldValue, newValue, index, column) => {\r\n    const newRows = [...sparesCategoryList];\r\n    newRows[index][column] = newValue;\r\n    setSparesCategoryList(newRows);\r\n    setOldCategory(oldValue);\r\n    setNewCategory(newValue);\r\n  };\r\n\r\n  const updateSparesCategory = async () => {\r\n    try {\r\n      const data = await putRequestNotStringify(\r\n        process.env.REACT_APP_API_URL + '/spares/sparesCategory/' + oldCategory + '/' + newCategory,\r\n        {}\r\n      );\r\n      setAlertMess('SparesCategory ' + data.category + ' updated successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setOldCategory('');\r\n      setNewCategory('');\r\n      fetchAllSparesCategoryListData();\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      setOldCategory('');\r\n      setNewCategory('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Spares Category Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Enter Spares Category\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={sparesCategory.category || ''}\r\n              onChange={handleCategoryChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <br></br>\r\n            <div className=\"content\">\r\n              {isSparesCategoryComplete() && (\r\n                <Button variant=\"contained\" color=\"error\" onClick={() => submitSparesCategory()}>\r\n                  Create Spares Category\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n              <div style={{ overflowX: 'auto' }}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Spares Category</TableCell>\r\n                      <TableCell>Spares Count</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {sparesCategoryList.map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        {/* <TableCell>{row?.category}</TableCell> */}\r\n                        <TableCell>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            value={row?.category || ''}\r\n                            onChange={(e) => handleInputChange(row.category, e.target.value, index, 'category')}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>{row?.sparesCount}</TableCell>\r\n                        <TableCell>\r\n                          {/* <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(row.id)}>\r\n                            Delete\r\n                          </Button>\r\n                          <Button variant=\"contained\" color=\"error\" onClick={() => updateSparesCategory()}>\r\n                            Update\r\n                          </Button> */}\r\n                          <Tooltip arrow placement=\"right\" title=\"Update\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                updateSparesCategory();\r\n                              }}\r\n                            >\r\n                              <Edit />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                handleRowDelete(row.id);\r\n                              }}\r\n                            >\r\n                              <Delete />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SparesCategory;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');"],"names":["sparesCategory","setSparesCategory","useState","sparesCategoryList","setSparesCategoryList","oldCategory","setOldCategory","newCategory","setNewCategory","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","fetchAllSparesCategoryListData","async","data","getRequest","err","console","error","message","saveSparesCategory","postRequest","payload","category","log","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","TextField","label","required","variant","value","onChange","event","updatedData","target","className","Button","color","onClick","submitSparesCategory","sparesCat","style","overflowX","Table","TableHead","TableRow","TableCell","TableBody","map","row","index","e","handleInputChange","oldValue","newValue","column","newRows","sparesCount","Tooltip","arrow","placement","IconButton","putRequestNotStringify","updateSparesCategory","Edit","deleteRequest","rowIndex","handleRowDelete","id","Delete","AlertDialog","createSvgIcon","d"],"sourceRoot":""}