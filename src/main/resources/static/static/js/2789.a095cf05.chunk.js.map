{"version":3,"file":"static/js/2789.a095cf05.chunk.js","mappings":"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","sources":["views/job/JobServiceUpdate.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst JobServiceUpdate = ({ data, updateData, firstInputRef }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const discountRole = ['ADMIN'];\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n  const isAuthorizedForDiscount = roles.some((role) => discountRole.includes(role));\r\n\r\n  const [serviceCategoryList, setServiceCategoryList] = React.useState([]);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [allService, setAllService] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    fetchAllServiceCategoryListData();\r\n    fetchAllServiceData();\r\n    return () => {\r\n      setServiceCategoryList([]);\r\n      setOptions([]);\r\n      setAllService([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllServiceCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service/serviceCategory');\r\n      setServiceCategoryList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllServiceData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service');\r\n      setAllService(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchOptions = async (value) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/service/findServiceInventoryWithFilter', value);\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (index, column, value) => {\r\n    const newRows = [...data];\r\n    newRows[index][column] = value;\r\n    updateData(newRows);\r\n  };\r\n\r\n  const addAdditionalRows = () => {\r\n    const newRows = [\r\n      {\r\n        sparesId: '',\r\n        category: '',\r\n        sparesAndLabour: '',\r\n        qty: '',\r\n        rate: '',\r\n        discount: '',\r\n        amount: ''\r\n      }\r\n    ];\r\n    updateData((prevRows) => [...prevRows, ...newRows]);\r\n  };\r\n\r\n  const handleRowDelete = (rowIndex) => {\r\n    const newRows = [...data];\r\n    newRows.splice(rowIndex, 1);\r\n    if (newRows.length > 0) {\r\n      updateData(newRows);\r\n    } else {\r\n      updateData([\r\n        {\r\n          sparesId: '',\r\n          category: '',\r\n          sparesAndLabour: '',\r\n          qty: '',\r\n          rate: '',\r\n          discount: '',\r\n          amount: ''\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleCategoryTypeChange = (value) => {\r\n    const serviceFilter = {\r\n      categoryList: [value]\r\n    };\r\n    fetchOptions(serviceFilter);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Job Service Information\">\r\n      <div style={{ overflowX: 'auto' }}>\r\n        <TableContainer>\r\n          <Table style={{ minWidth: isMobile ? '600px' : '1000px' }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ width: '20%' }}>Category</TableCell>\r\n                <TableCell sx={{ width: '30%' }}>Spares</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Qty</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Rate</TableCell>\r\n                {isAuthorizedForDiscount && <TableCell sx={{ width: '10%' }}>Discount</TableCell>}\r\n                <TableCell sx={{ width: '10%' }}>Amount</TableCell>\r\n                <TableCell sx={{ width: '10%' }}>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data.map((row, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell sx={{ width: '20%' }}>\r\n                    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                      <InputLabel></InputLabel>\r\n                      <Select\r\n                        fullWidth\r\n                        value={row?.category || ''}\r\n                        onChange={(e) => {\r\n                          handleCategoryTypeChange(e.target.value);\r\n                          handleInputChange(index, 'category', e.target.value);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            document.querySelector(`#spares-input-${index}`)?.focus();\r\n                          }\r\n                        }}\r\n                      >\r\n                        {serviceCategoryList.map((option) => (\r\n                          <MenuItem key={option.id} value={option.category}>\r\n                            {option.category}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '30%' }}>\r\n                    <Autocomplete\r\n                      options={options.filter((option) => !data.some((r) => r.sparesId === option.id))}\r\n                      getOptionLabel={(option) => option.desc}\r\n                      style={{ width: 300 }}\r\n                      value={allService.find((option) => option.desc === row.sparesAndLabour) || null}\r\n                      isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                      onChange={(event, newValue) => {\r\n                        if (!newValue) return;\r\n                        handleInputChange(index, 'sparesAndLabour', newValue.desc);\r\n                        handleInputChange(index, 'rate', newValue.amount);\r\n                        handleInputChange(index, 'amount', newValue.amount * row?.qty - row?.discount || 0);\r\n                        handleInputChange(index, 'sparesId', newValue.id);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          id={`spares-input-${index}`}\r\n                          label=\"Search Service\"\r\n                          disabled={!!row.sparesId}\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === 'Enter') {\r\n                              e.preventDefault();\r\n                              document.querySelector(`#qty-input-${index}`)?.focus();\r\n                            }\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id={`qty-input-${index}`}\r\n                      value={row?.qty || ''}\r\n                      onChange={(e) => {\r\n                        const val = e.target.value;\r\n                        handleInputChange(index, 'qty', val);\r\n                        handleInputChange(index, 'amount', val * row?.rate - row?.discount || 0);\r\n                      }}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                          e.preventDefault();\r\n                          if (isAuthorizedForDiscount) {\r\n                            document.querySelector(`#discount-input-${index}`)?.focus();\r\n                          } else {\r\n                            firstInputRef?.current?.focus(); // fallback\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField fullWidth value={row?.rate || ''} disabled />\r\n                  </TableCell>\r\n                  {isAuthorizedForDiscount && (\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id={`discount-input-${index}`}\r\n                        value={row?.discount || ''}\r\n                        onChange={(e) => {\r\n                          const val = Number(e.target.value) || 0;\r\n                          handleInputChange(index, 'discount', val);\r\n                          handleInputChange(index, 'amount', Number(row?.rate * row?.qty) - val || 0);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            firstInputRef?.current?.focus(); // Jump to \"Add Row\"\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  )}\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <TextField fullWidth value={row?.amount || ''} disabled />\r\n                  </TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>\r\n                    <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(index)}>\r\n                      Delete\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n\r\n      <Grid item xs={12}>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"error\"\r\n          onClick={addAdditionalRows}\r\n          ref={firstInputRef} // 👈 ref to allow focus from kiloMeters field\r\n        >\r\n          Add Row\r\n        </Button>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nJobServiceUpdate.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  updateData: PropTypes.func.isRequired,\r\n  firstInputRef: PropTypes.any // 👈 added prop\r\n};\r\n\r\nexport default JobServiceUpdate;\r\n"],"names":["_ref","data","updateData","firstInputRef","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","discountRole","isAuthorizedForDiscount","JSON","parse","localStorage","getItem","some","role","includes","serviceCategoryList","setServiceCategoryList","React","options","setOptions","allService","setAllService","fetchAllServiceCategoryListData","fetchAllServiceData","async","getRequest","err","console","log","message","handleInputChange","index","column","value","newRows","handleCategoryTypeChange","postRequest","fetchOptions","categoryList","_jsxs","MainCard","title","children","_jsx","style","overflowX","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","sx","width","TableBody","map","row","FormControl","variant","m","InputLabel","Select","fullWidth","category","onChange","e","target","onKeyDown","_document$querySelect","key","preventDefault","document","querySelector","focus","option","MenuItem","id","Autocomplete","filter","r","sparesId","getOptionLabel","desc","find","sparesAndLabour","isOptionEqualToValue","event","newValue","amount","qty","discount","renderInput","params","TextField","label","disabled","_document$querySelect2","val","rate","_document$querySelect3","_firstInputRef$curren","current","Number","_firstInputRef$curren2","Button","color","onClick","rowIndex","splice","length","handleRowDelete","Grid","item","xs","addAdditionalRows","prevRows","ref"],"sourceRoot":""}