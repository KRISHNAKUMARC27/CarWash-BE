{"version":3,"file":"static/js/2789.5f85362a.chunk.js","mappings":"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","sources":["views/job/JobServiceUpdate.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Grid } from '@mui/material';\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n//import { gridSpacing } from 'store/constant';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst JobServiceUpdate = ({ data, updateData }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm')); // Check for small screens\r\n  const discountRole = ['ADMIN'];\r\n\r\n  // Get logged-in user's roles\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n\r\n  // Check if user is authorized to see the \"DISCOUNT\" column\r\n  const isAuthorizedForDiscount = roles.some((role) => discountRole.includes(role));\r\n\r\n  const [serviceCategoryList, setServiceCategoryList] = React.useState([]);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [allService, setAllService] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    fetchAllServiceCategoryListData();\r\n    fetchAllServiceData();\r\n    return () => {\r\n      setServiceCategoryList([]);\r\n      setOptions([]);\r\n      setAllService([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllServiceCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service/serviceCategory');\r\n      setServiceCategoryList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllServiceData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/service');\r\n      setAllService(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchOptions = async (value) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/service/findServiceInventoryWithFilter', value);\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (index, column, value) => {\r\n    const newRows = [...data];\r\n    newRows[index][column] = value;\r\n    updateData(newRows);\r\n  };\r\n\r\n  const addAdditionalRows = () => {\r\n    const newRows = [...Array(1)].map(() => ({\r\n      sparesId: '',\r\n      category: '',\r\n      sparesAndLabour: '',\r\n      qty: '',\r\n      rate: '',\r\n      discount: '',\r\n      amount: ''\r\n    }));\r\n    updateData((prevRows) => [...prevRows, ...newRows]);\r\n  };\r\n\r\n  const handleRowDelete = (rowIndex) => {\r\n    const newRows = [...data];\r\n    newRows.splice(rowIndex, 1);\r\n    if (newRows.length > 0) {\r\n      updateData(newRows);\r\n    } else {\r\n      updateData(\r\n        [...Array(1)].map(() => ({ sparesId: '', category: '', sparesAndLabour: '', qty: '', rate: '', discount: '', amount: '' }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCategoryTypeChange = (value) => {\r\n    let myArray = [value];\r\n    const serviceFilter = {\r\n      categoryList: myArray\r\n    };\r\n    fetchOptions(serviceFilter);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MainCard title=\"Job Service Information\">\r\n        {/* <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={12}> */}\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer>\r\n            <Table style={{ minWidth: isMobile ? '600px' : '1000px' }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ width: '20%' }}>Category</TableCell>\r\n                  <TableCell sx={{ width: '30%' }}>Spares</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Qty</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Rate</TableCell>\r\n                  {isAuthorizedForDiscount && <TableCell sx={{ width: '10%' }}>Discount</TableCell>}\r\n                  <TableCell sx={{ width: '10%' }}>Amount</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.map((row, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell sx={{ width: '20%' }}>\r\n                      <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                        <InputLabel id=\"demo-simple-select-standard-label\"></InputLabel>\r\n                        <Select\r\n                          fullWidth\r\n                          labelId=\"demo-simple-select-standard-label\"\r\n                          id=\"demo-simple-select-standard-label\"\r\n                          value={row?.category || ''}\r\n                          label=\"Category Type\"\r\n                          sx={{\r\n                            '& .MuiSelect-select': {\r\n                              color: 'black' // Change to your desired color\r\n                            }\r\n                          }}\r\n                          onChange={(e) => {\r\n                            handleCategoryTypeChange(e.target.value);\r\n                            handleInputChange(index, 'category', e.target.value);\r\n                          }}\r\n                        >\r\n                          {serviceCategoryList.map((option) => (\r\n                            <MenuItem key={option.id} value={option.category}>\r\n                              {option.category}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </TableCell>\r\n                    <TableCell sx={{ width: '30%' }}>\r\n                      <Autocomplete\r\n                        options={options.filter((option) => !data.some((row) => row.sparesId === option.id))} // Filter out already added spares\r\n                        getOptionLabel={(option) => option.desc}\r\n                        style={{ width: 300 }}\r\n                        value={allService.find((option) => option.desc === row.sparesAndLabour) || null}\r\n                        isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                        onChange={(event, newValue) => {\r\n                          console.log('new value is ' + JSON.stringify(newValue));\r\n                          console.log('row is ' + JSON.stringify(row));\r\n                          //setChoosenService(newValue);\r\n                          handleInputChange(index, 'sparesAndLabour', newValue.desc);\r\n                          handleInputChange(index, 'rate', newValue.amount);\r\n                          handleInputChange(index, 'amount', newValue.amount * row?.qty - row?.discount || 0);\r\n                          handleInputChange(index, 'sparesId', newValue.id);\r\n                        }}\r\n                        renderInput={(params) => <TextField {...params} label=\"Search Service\" disabled={!!row.sparesId} />}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <TextField\r\n                        fullWidth\r\n                        value={row?.qty || ''}\r\n                        onChange={(e) => {\r\n                          const val = e.target.value;\r\n                          handleInputChange(index, 'qty', val);\r\n                          handleInputChange(index, 'amount', val * row?.rate - row?.discount || 0);\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <TextField\r\n                        fullWidth\r\n                        value={row?.rate || ''}\r\n                        disabled\r\n                        onChange={(e) => handleInputChange(index, 'rate', e.target.value)}\r\n                      />\r\n                    </TableCell>\r\n                    {isAuthorizedForDiscount && (\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          value={row?.discount || ''}\r\n                          onChange={(e) => {\r\n                            const val = Number(e.target.value) || 0;\r\n                            handleInputChange(index, 'discount', val);\r\n                            handleInputChange(index, 'amount', Number(row?.rate * row?.qty) - val || 0);\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                    )}\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <TextField\r\n                        fullWidth\r\n                        value={row?.amount || ''}\r\n                        disabled\r\n                        onChange={(e) => handleInputChange(index, 'amount', e.target.value)}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell sx={{ width: '10%' }}>\r\n                      <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(index)}>\r\n                        Delete\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n        <Grid item xs={12}>\r\n          <br></br>\r\n          <Button variant=\"contained\" color=\"error\" onClick={addAdditionalRows}>\r\n            Add Row\r\n          </Button>\r\n        </Grid>\r\n        {/* </Grid>\r\n        </Grid> */}\r\n      </MainCard>\r\n    </>\r\n  );\r\n};\r\n\r\nJobServiceUpdate.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  updateData: PropTypes.func.isRequired\r\n};\r\nexport default JobServiceUpdate;\r\n"],"names":["_ref","data","updateData","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","discountRole","isAuthorizedForDiscount","JSON","parse","localStorage","getItem","some","role","includes","serviceCategoryList","setServiceCategoryList","React","options","setOptions","allService","setAllService","fetchAllServiceCategoryListData","fetchAllServiceData","async","getRequest","err","console","log","message","handleInputChange","index","column","value","newRows","handleCategoryTypeChange","postRequest","fetchOptions","categoryList","_jsx","_Fragment","children","_jsxs","MainCard","title","style","overflowX","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","sx","width","TableBody","map","row","FormControl","variant","m","InputLabel","id","Select","fullWidth","labelId","category","label","color","onChange","e","target","option","MenuItem","Autocomplete","filter","sparesId","getOptionLabel","desc","find","sparesAndLabour","isOptionEqualToValue","event","newValue","stringify","amount","qty","discount","renderInput","params","TextField","disabled","val","rate","Number","Button","onClick","rowIndex","splice","length","Array","handleRowDelete","Grid","item","xs","addAdditionalRows","prevRows"],"sourceRoot":""}