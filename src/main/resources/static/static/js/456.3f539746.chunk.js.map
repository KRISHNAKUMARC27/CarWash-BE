{"version":3,"file":"static/js/456.3f539746.chunk.js","mappings":"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","sources":["views/estimate/MultiSettle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField, Button, MenuItem } from '@mui/material';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { postRequest } from 'utils/fetchRequest';\r\n\r\nconst MultiSettle = ({ paymentModes, settleBillDialogOpen, selectedRows, handleClose, setAlertMess, setShowAlert }) => {\r\n  const [multicredit, setMultiCredit] = useState({});\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setMultiCredit({});\r\n    };\r\n  }, []);\r\n\r\n  const handleCreditPaymentChange = (field, value) => {\r\n    const updatedData = { ...multicredit, [field]: value };\r\n    setMultiCredit(updatedData);\r\n  };\r\n\r\n  const handleMultiPaymentSubmit = async () => {\r\n    if (multicredit.paymentMode == null) {\r\n      alert('Please select a payment mode.');\r\n      return;\r\n    }\r\n\r\n    if (multicredit.amount == null || multicredit.amount <= 0) {\r\n      alert('Enter valid amount');\r\n      return;\r\n    }\r\n\r\n    const updatedMultiSettleObj = {\r\n      ...multicredit,\r\n      estimateIds: selectedRows.map((row) => row.id)\r\n    };\r\n\r\n    console.log(JSON.stringify(updatedMultiSettleObj));\r\n\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/estimate/multiCreditSettlement', updatedMultiSettleObj);\r\n      console.log(data);\r\n      setAlertMess(data.result);\r\n      setShowAlert(true);\r\n      handleClose();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setShowAlert(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {settleBillDialogOpen && (\r\n        <Dialog\r\n          open={settleBillDialogOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n          fullWidth\r\n          maxWidth=\"md\"\r\n        >\r\n          <DialogTitle id=\"scroll-dialog-title\" sx={{ fontSize: '1.0rem' }}>\r\n            Multiple Credit Settlement\r\n          </DialogTitle>\r\n\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <br></br>\r\n            <Grid container item spacing={gridSpacing} alignItems=\"center\">\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Credit Amount\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  required\r\n                  value={multicredit.amount || 0}\r\n                  onChange={(e) => handleCreditPaymentChange('amount', parseFloat(e.target.value) || 0)}\r\n                  type=\"number\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  select\r\n                  label=\"Payment Mode\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  required\r\n                  value={multicredit.paymentMode || ''}\r\n                  onChange={(e) => handleCreditPaymentChange('paymentMode', e.target.value)}\r\n                >\r\n                  {paymentModes\r\n                    .filter((mode) => mode !== 'CREDIT') // Exclude \"CREDIT\"\r\n                    .map((mode) => (\r\n                      <MenuItem key={mode} value={mode}>\r\n                        {mode}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Comment\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  value={multicredit.comment || ''}\r\n                  onChange={(e) => handleCreditPaymentChange('comment', e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleMultiPaymentSubmit} color=\"secondary\">\r\n              Save\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nMultiSettle.propTypes = {\r\n  paymentModes: PropTypes.array.isRequired,\r\n  settleBillDialogOpen: PropTypes.bool.isRequired,\r\n  selectedRows: PropTypes.array.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  setAlertMess: PropTypes.func.isRequired,\r\n  setShowAlert: PropTypes.func.isRequired\r\n};\r\nexport default MultiSettle;\r\n"],"names":["_ref","paymentModes","settleBillDialogOpen","selectedRows","handleClose","setAlertMess","setShowAlert","multicredit","setMultiCredit","useState","useEffect","handleCreditPaymentChange","field","value","updatedData","_jsx","_Fragment","children","_jsxs","Dialog","open","onClose","scroll","fullWidth","maxWidth","DialogTitle","id","sx","fontSize","DialogContent","dividers","Grid","container","item","spacing","gridSpacing","alignItems","xs","TextField","label","variant","required","amount","onChange","e","parseFloat","target","type","select","paymentMode","filter","mode","map","MenuItem","comment","DialogActions","Button","onClick","async","alert","updatedMultiSettleObj","estimateIds","row","console","log","JSON","stringify","data","postRequest","result","err","message","color"],"sourceRoot":""}