{"version":3,"file":"static/js/6422.d97434f2.chunk.js","mappings":"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","sources":["views/employee/SettleSalary.js","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  MenuItem,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  InputLabel,\r\n  FormControl,\r\n  Stack\r\n} from '@mui/material';\r\nimport dayjs from 'dayjs';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst SettleSalary = () => {\r\n  const [employeeList, setEmployeeList] = useState([]);\r\n  const [salaryDate, setSalaryDate] = useState(dayjs()); // Default: Today\r\n  const [employeeSalary, setEmployeeSalary] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [formValues, setFormValues] = useState({\r\n    salaryPaid: '',\r\n    paymentMode: 'CASH'\r\n  });\r\n  const [salaryAdvanceDialogOpen, setSalaryAdvanceDialogOpen] = useState(false);\r\n  const [expense, setExpense] = useState({\r\n    type: 'SALARY-ADVANCE',\r\n    paymentMode: '',\r\n    expenseAmount: 0,\r\n    comment: ''\r\n  });\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMess, setAlertMess] = useState('');\r\n  const [alertColor, setAlertColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchAllEmployeeListData();\r\n  }, []);\r\n\r\n  const fetchAllEmployeeListData = async () => {\r\n    try {\r\n      const data = await getRequest(`${process.env.REACT_APP_API_URL}/employee`);\r\n      setEmployeeList(data);\r\n    } catch (err) {\r\n      console.error('Error fetching employees:', err);\r\n    }\r\n  };\r\n\r\n  const setupEmployeeSalary = async (id) => {\r\n    try {\r\n      const data = await getRequest(\r\n        `${process.env.REACT_APP_API_URL}/employee/setupEmployeeSalary/${id}/${salaryDate.format('YYYY-MM-DD')}`\r\n      );\r\n      setEmployeeSalary(data);\r\n      setFormValues({\r\n        salaryPaid: data.salaryEarned - data.salaryAdvance,\r\n        paymentMode: ''\r\n      });\r\n      setDialogOpen(true);\r\n    } catch (err) {\r\n      console.error('Error in setupEmployeeSalary:', err);\r\n      setAlertMess(err.message || 'Error fetching employee salary.');\r\n      setAlertColor('error');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n    setSalaryAdvanceDialogOpen(false);\r\n    setEmployeeSalary(null);\r\n    setFormValues({\r\n      salaryPaid: '',\r\n      paymentMode: ''\r\n    });\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormValues((prev) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleExpenseChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setExpense((prev) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmitSalary = async () => {\r\n    try {\r\n      const payload = {\r\n        ...employeeSalary,\r\n        salaryPaid: formValues.salaryPaid,\r\n        paymentMode: formValues.paymentMode,\r\n        salaryDate: salaryDate.toISOString()\r\n      };\r\n      await postRequest(`${process.env.REACT_APP_API_URL}/employee/settleEmployeeSalary`, payload);\r\n\r\n      setAlertMess('Salary settled successfully!');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      handleDialogClose();\r\n    } catch (err) {\r\n      console.error('Error submitting salary:', err);\r\n      setAlertMess(err.message || 'Failed to submit salary.');\r\n      setAlertColor('error');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleSubmitAdvance = async () => {\r\n    try {\r\n      const payload = {\r\n        ...expense,\r\n        desc: expense?.empName + ' - SALARY-ADVANCE'\r\n      };\r\n      await postRequest(`${process.env.REACT_APP_API_URL}/expense/salaryAdvance`, payload);\r\n\r\n      setAlertMess('Salary advance added successfully!');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      handleDialogClose();\r\n    } catch (err) {\r\n      console.error('Error submitting advance:', err);\r\n      setAlertMess(err.message || 'Failed to submit advance.');\r\n      setAlertColor('error');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MainCard title=\"Settle Salary\">\r\n        <Stack direction=\"row\" spacing={2} mb={2}>\r\n          <DatePicker label=\"Salary Date\" value={salaryDate} onChange={(newValue) => setSalaryDate(newValue)} format=\"YYYY-MM-DD\" />\r\n        </Stack>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Staff Name</TableCell>\r\n              <TableCell>Action</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {employeeList.map((employee) => (\r\n              <TableRow key={employee.id}>\r\n                <TableCell>{employee.name}</TableCell>\r\n                <TableCell>\r\n                  <Button variant=\"contained\" color=\"success\" onClick={() => setupEmployeeSalary(employee.id)}>\r\n                    Settle Salary\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"info\"\r\n                    onClick={() => {\r\n                      setExpense((prev) => ({\r\n                        ...prev,\r\n                        empName: employee.name,\r\n                        empId: employee.id\r\n                      }));\r\n                      setSalaryAdvanceDialogOpen(true);\r\n                    }}\r\n                  >\r\n                    Pay Advance\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </MainCard>\r\n\r\n      {/* Salary Dialog */}\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Settle Salary - {employeeSalary?.name}</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Salary Type\"\r\n            value={employeeSalary?.salaryType || ''}\r\n            InputProps={{ readOnly: true }}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Settlement Type\"\r\n            value={employeeSalary?.salarySettlementType || ''}\r\n            InputProps={{ readOnly: true }}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Salary Earned\"\r\n            value={employeeSalary?.salaryEarned || ''}\r\n            InputProps={{ readOnly: true }}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Salary Advance\"\r\n            value={employeeSalary?.salaryAdvance || ''}\r\n            InputProps={{ readOnly: true }}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Salary To Be Paid\"\r\n            name=\"salaryPaid\"\r\n            type=\"number\"\r\n            value={formValues.salaryPaid}\r\n            onChange={handleFormChange}\r\n          />\r\n          <FormControl fullWidth margin=\"dense\">\r\n            <InputLabel>Payment Mode</InputLabel>\r\n            <Select name=\"paymentMode\" value={formValues.paymentMode} onChange={handleFormChange} label=\"Payment Mode\">\r\n              <MenuItem value=\"CASH\">Cash</MenuItem>\r\n              <MenuItem value=\"BANK TRANSFER\">Bank Transfer</MenuItem>\r\n              <MenuItem value=\"UPI\">UPI</MenuItem>\r\n              {/* Add more if needed */}\r\n            </Select>\r\n          </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose}>Cancel</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitSalary}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={salaryAdvanceDialogOpen} onClose={handleDialogClose} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Paying Salary Advance for {expense?.empName}</DialogTitle>\r\n        <DialogContent>\r\n          <TextField fullWidth margin=\"dense\" label=\"Expense Type\" value={expense?.type || ''} InputProps={{ readOnly: true }} />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Advance Amount\"\r\n            name=\"expenseAmount\"\r\n            type=\"number\"\r\n            value={expense.expenseAmount}\r\n            onChange={handleExpenseChange}\r\n          />\r\n          <FormControl fullWidth margin=\"dense\">\r\n            <InputLabel>Payment Mode</InputLabel>\r\n            <Select name=\"paymentMode\" value={expense.paymentMode} onChange={handleExpenseChange} label=\"Payment Mode\">\r\n              <MenuItem value=\"CASH\">Cash</MenuItem>\r\n              <MenuItem value=\"BANK TRANSFER\">Bank Transfer</MenuItem>\r\n              <MenuItem value=\"UPI\">UPI</MenuItem>\r\n              {/* Add more if needed */}\r\n            </Select>\r\n          </FormControl>\r\n          <TextField fullWidth margin=\"dense\" label=\"Comment\" name=\"comment\" value={expense.comment} onChange={handleExpenseChange} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose}>Cancel</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitAdvance}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Alert */}\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettleSalary;\r\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["SettleSalary","employeeList","setEmployeeList","useState","salaryDate","setSalaryDate","dayjs","employeeSalary","setEmployeeSalary","dialogOpen","setDialogOpen","formValues","setFormValues","salaryPaid","paymentMode","salaryAdvanceDialogOpen","setSalaryAdvanceDialogOpen","expense","setExpense","type","expenseAmount","comment","showAlert","setShowAlert","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","fetchAllEmployeeListData","async","data","getRequest","err","console","error","handleDialogClose","handleFormChange","e","name","value","target","prev","handleExpenseChange","_jsxs","_Fragment","children","MainCard","title","_jsx","Stack","direction","spacing","mb","DatePicker","label","onChange","newValue","format","Table","TableHead","TableRow","TableCell","TableBody","map","employee","Button","variant","color","onClick","id","salaryEarned","salaryAdvance","message","setupEmployeeSalary","empName","empId","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","TextField","margin","salaryType","InputProps","readOnly","salarySettlementType","FormControl","InputLabel","Select","MenuItem","DialogActions","payload","toISOString","postRequest","desc","AlertDialog","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx"],"sourceRoot":""}