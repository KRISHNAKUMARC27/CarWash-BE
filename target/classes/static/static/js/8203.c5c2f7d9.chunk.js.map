{"version":3,"file":"static/js/8203.c5c2f7d9.chunk.js","mappings":"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","sources":["views/estimate/BillPayment.js","../node_modules/@mui/icons-material/esm/AddCircle.js","../node_modules/@mui/icons-material/esm/RemoveCircle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  IconButton,\r\n  Typography\r\n} from '@mui/material';\r\nimport {} from '@mui/material';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { postRequest } from 'utils/fetchRequest';\r\nimport { AddCircle, RemoveCircle } from '@mui/icons-material';\r\n\r\nconst BillPayment = ({\r\n  estimate,\r\n  setEstimate,\r\n  paymentModes,\r\n  estimateCreateOpen,\r\n  handleClose,\r\n  setAlertMess,\r\n  setShowAlert,\r\n  setAlertColor\r\n}) => {\r\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n  const [remainingAmount, setRemainingAmount] = useState(0); // To store remaining amount dynamically\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setRemainingAmount(0);\r\n    };\r\n  }, []);\r\n\r\n  const handlePaymentSplitChange = (index, field, value) => {\r\n    const updatedPaymentSplitList = [...estimate.paymentSplitList];\r\n    const currentSplit = updatedPaymentSplitList[index];\r\n\r\n    // Update the field\r\n    const updatedSplit = {\r\n      ...currentSplit,\r\n      [field]: value\r\n    };\r\n\r\n    // If it's not a new record (no ADD flag) and already has a value, mark as MODIFY\r\n    const isExisting = currentSplit.paymentId && currentSplit.flag !== 'ADD';\r\n    if (isExisting) {\r\n      updatedSplit.flag = 'MODIFY';\r\n    }\r\n\r\n    updatedPaymentSplitList[index] = updatedSplit;\r\n\r\n    // Calculate totals\r\n    const totalPaidExcludingCredit = updatedPaymentSplitList\r\n      .filter((split) => split.paymentMode !== 'CREDIT')\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n\r\n    const grandTotal = estimate.grandTotal || 0;\r\n    const pendingAmount = grandTotal - totalPaidExcludingCredit;\r\n\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: updatedPaymentSplitList,\r\n      pendingAmount: pendingAmount > 0 ? pendingAmount : 0,\r\n      creditFlag: updatedPaymentSplitList.some((split) => split.paymentMode === 'CREDIT')\r\n    }));\r\n  };\r\n\r\n  const addPaymentSplitRow = () => {\r\n    const grandTotal = estimate.grandTotal || 0;\r\n    const totalPaid = estimate.paymentSplitList.reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const remainingAmount = grandTotal - totalPaid;\r\n\r\n    if (remainingAmount <= 0) {\r\n      alert('No remaining amount to allocate. Please adjust the existing payment splits.');\r\n      return;\r\n    }\r\n\r\n    // Add a new row with the remaining amount prefilled\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: [\r\n        ...prevState.paymentSplitList,\r\n        { paymentAmount: remainingAmount, paymentMode: 'CASH', flag: 'ADD' } // Prefill paymentAmount with remaining value\r\n      ]\r\n    }));\r\n  };\r\n\r\n  const removePaymentSplitRow = (index) => {\r\n    const updatedPaymentSplitList = [...estimate.paymentSplitList];\r\n    const currentSplit = updatedPaymentSplitList[index];\r\n\r\n    if (currentSplit.flag === 'ADD') {\r\n      // It's a new unsaved row, just remove it\r\n      updatedPaymentSplitList.splice(index, 1);\r\n    } else {\r\n      // It's an existing row, mark it as DELETE\r\n      updatedPaymentSplitList[index] = {\r\n        ...currentSplit,\r\n        flag: 'DELETE'\r\n      };\r\n    }\r\n\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: updatedPaymentSplitList\r\n    }));\r\n  };\r\n\r\n  const handleOpenConfirmDialog = (remaining) => {\r\n    setRemainingAmount(remaining); // Store remaining amount for context\r\n    setConfirmDialogOpen(true);\r\n  };\r\n\r\n  // Close the confirmation dialog\r\n  const handleCloseConfirmDialog = () => {\r\n    setConfirmDialogOpen(false);\r\n  };\r\n\r\n  // Handle user confirmation (Yes to add CREDIT, No to cancel)\r\n  const handleConfirmAddCredit = () => {\r\n    setConfirmDialogOpen(false); // Close confirmation dialog\r\n    // Add remaining amount as CREDIT\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: [...prevState.paymentSplitList, { paymentAmount: remainingAmount, paymentMode: 'CREDIT' }],\r\n      pendingAmount: remainingAmount,\r\n      creditFlag: true\r\n    }));\r\n    // handleClose();\r\n    // handleEstimateSave(); // Proceed with saving the estimate\r\n  };\r\n\r\n  // Handle changes in credit payments\r\n  const handleCreditPaymentChange = (index, field, value) => {\r\n    const updatedCreditPaymentList = [...estimate.creditPaymentList];\r\n    const currentCredit = updatedCreditPaymentList[index];\r\n\r\n    const updatedCredit = {\r\n      ...currentCredit,\r\n      [field]: value\r\n    };\r\n\r\n    // If it's an existing record and not marked as ADD, mark it as MODIFY\r\n    const isExisting = currentCredit.paymentId && currentCredit.flag !== 'ADD';\r\n    if (isExisting) {\r\n      updatedCredit.flag = 'MODIFY';\r\n    }\r\n\r\n    updatedCreditPaymentList[index] = updatedCredit;\r\n\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: updatedCreditPaymentList\r\n    }));\r\n  };\r\n\r\n  // Add a new credit payment row\r\n  const addCreditPaymentRow = () => {\r\n    const grandTotal = estimate.grandTotal || 0;\r\n    const totalPaid = estimate.paymentSplitList\r\n      .filter((payment) => payment.paymentMode !== 'CREDIT')\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const totalCreditPaid = estimate.creditPaymentList.reduce((sum, cred) => sum + (cred.amount || 0), 0);\r\n    const remainingAmount = grandTotal - totalPaid - totalCreditPaid;\r\n\r\n    if (remainingAmount <= 0) {\r\n      alert('No remaining amount to allocate. Please adjust the existing payment splits.');\r\n      return;\r\n    }\r\n\r\n    // Add a new row with the remaining amount prefilled\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: [\r\n        ...(prevState.creditPaymentList || []), // Safely fallback to an empty array\r\n        { amount: remainingAmount, paymentMode: 'CASH', comment: '', flag: 'ADD' } // New credit payment row\r\n      ]\r\n    }));\r\n  };\r\n\r\n  // Remove a credit payment row\r\n  const removeCreditPaymentRow = (index) => {\r\n    const updatedCreditPaymentList = [...estimate.creditPaymentList];\r\n    const currentCredit = updatedCreditPaymentList[index];\r\n\r\n    if (currentCredit.flag === 'ADD') {\r\n      // Remove new row directly\r\n      updatedCreditPaymentList.splice(index, 1);\r\n    } else {\r\n      // Mark existing row as DELETE\r\n      updatedCreditPaymentList[index] = {\r\n        ...currentCredit,\r\n        flag: 'DELETE'\r\n      };\r\n    }\r\n\r\n    // Recalculate pending amount after change\r\n    const totalCreditPayments = updatedCreditPaymentList\r\n      .filter((c) => c.flag !== 'DELETE') // Don't count deleted ones\r\n      .reduce((sum, credit) => sum + (credit.amount || 0), 0);\r\n\r\n    const grandTotal = estimate.grandTotal || 0;\r\n    const newPendingAmount = grandTotal - totalCreditPayments;\r\n\r\n    setEstimate((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: updatedCreditPaymentList,\r\n      pendingAmount: newPendingAmount > 0 ? newPendingAmount : 0,\r\n      creditSettledFlag: newPendingAmount === 0\r\n    }));\r\n  };\r\n\r\n  const handleEstimateSave = async () => {\r\n    if (estimate.grandTotal <= 0) {\r\n      alert('Grand total is 0. Cannot generate bill');\r\n      return;\r\n    }\r\n\r\n    const grandTotal = estimate.grandTotal || 0;\r\n\r\n    // Filter out DELETE for validation and calculation\r\n    const activePaymentSplits = estimate.paymentSplitList.filter((split) => split.flag !== 'DELETE');\r\n    const totalPaid = activePaymentSplits.reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const remaining = grandTotal - totalPaid;\r\n\r\n    if (activePaymentSplits.some((split) => !split.paymentMode)) {\r\n      alert('Please select a payment mode for all entries.');\r\n      return;\r\n    }\r\n\r\n    if (remaining > 0) {\r\n      handleOpenConfirmDialog(remaining);\r\n      return;\r\n    } else if (remaining < 0) {\r\n      alert('Payment exceeds the grand total. Please adjust the amounts.');\r\n      return;\r\n    }\r\n\r\n    const activeCreditPayments = estimate.creditPaymentList.filter((credit) => credit.flag !== 'DELETE');\r\n    if (activeCreditPayments.some((credit) => !credit.paymentMode)) {\r\n      alert('Please select a payment mode for all entries.');\r\n      return;\r\n    }\r\n\r\n    const totalCreditPayments = activeCreditPayments.reduce((sum, credit) => sum + (credit.amount || 0), 0);\r\n    const totalPaidExcludingCredit = activePaymentSplits\r\n      .filter((split) => split.paymentMode !== 'CREDIT')\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n\r\n    const newPendingAmount = grandTotal - totalPaidExcludingCredit - totalCreditPayments;\r\n\r\n    const updatedEstimate = {\r\n      ...estimate,\r\n      pendingAmount: newPendingAmount > 0 ? newPendingAmount : 0,\r\n      creditSettledFlag: newPendingAmount > 0 ? false : true\r\n      // Include all rows including DELETEs for backend\r\n      // estimate.paymentSplitList and estimate.creditPaymentList already contain full list\r\n    };\r\n\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/estimate', updatedEstimate);\r\n      setAlertMess('Bill id ' + data.estimateId + ' saved successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      handleClose();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {estimateCreateOpen && (\r\n        <Dialog\r\n          open={estimateCreateOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n          fullWidth\r\n          maxWidth=\"lg\"\r\n        >\r\n          <DialogTitle id=\"scroll-dialog-title\" sx={{ fontSize: '1.0rem' }}>\r\n            Estimate Generation for {estimate.vehicleRegNo}\r\n          </DialogTitle>\r\n\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <br></br>\r\n            <Grid container direction=\"row\" spacing={gridSpacing}>\r\n              <Grid item xs={6}>\r\n                <TextField label=\"Grand Total\" required variant=\"outlined\" value={estimate?.grandTotal || 0} />\r\n              </Grid>\r\n              {estimate.paymentSplitList\r\n                .filter((split) => split.flag !== 'DELETE')\r\n                .map((split, index) => (\r\n                  <Grid container item spacing={gridSpacing} key={index} alignItems=\"center\">\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        label=\"Payment Amount\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        required\r\n                        value={split.paymentAmount}\r\n                        onChange={(e) => handlePaymentSplitChange(index, 'paymentAmount', parseFloat(e.target.value) || 0)}\r\n                        type=\"number\"\r\n                        disabled={!!split.paymentDate}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        select\r\n                        label=\"Payment Mode\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        required\r\n                        value={split.paymentMode || 'CASH'}\r\n                        disabled={!!split.paymentDate}\r\n                        onChange={(e) => handlePaymentSplitChange(index, 'paymentMode', e.target.value)}\r\n                      >\r\n                        {paymentModes.map((mode) => (\r\n                          <MenuItem key={mode} value={mode}>\r\n                            {mode}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      {index === 0 ? (\r\n                        <IconButton onClick={addPaymentSplitRow} color=\"primary\" disabled={!!split.paymentDate}>\r\n                          <AddCircle />\r\n                        </IconButton>\r\n                      ) : (\r\n                        <IconButton onClick={() => removePaymentSplitRow(index)} color=\"secondary\" disabled={!!split.paymentDate}>\r\n                          <RemoveCircle />\r\n                        </IconButton>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                ))}\r\n            </Grid>\r\n            <br></br>\r\n            {estimate.creditFlag && (\r\n              <Grid container direction=\"row\" spacing={gridSpacing}>\r\n                <Grid item xs={4}>\r\n                  <Typography variant=\"h4\">Credit Payment</Typography>\r\n                </Grid>\r\n                {(estimate.creditPaymentList || [])\r\n                  .filter((credit) => credit.flag !== 'DELETE')\r\n                  .map((credit, index) => (\r\n                    <Grid container item spacing={gridSpacing} key={index} alignItems=\"center\">\r\n                      <Grid item xs={4}>\r\n                        <TextField\r\n                          label=\"Credit Amount\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          required\r\n                          value={credit.amount}\r\n                          onChange={(e) => handleCreditPaymentChange(index, 'amount', parseFloat(e.target.value) || 0)}\r\n                          type=\"number\"\r\n                          disabled={!!credit.creditDate}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          select\r\n                          label=\"Payment Mode\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          required\r\n                          value={credit.paymentMode || 'CASH'}\r\n                          disabled={!!credit.creditDate}\r\n                          onChange={(e) => handleCreditPaymentChange(index, 'paymentMode', e.target.value)}\r\n                        >\r\n                          {paymentModes\r\n                            .filter((mode) => mode !== 'CREDIT') // Exclude \"CREDIT\"\r\n                            .map((mode) => (\r\n                              <MenuItem key={mode} value={mode}>\r\n                                {mode}\r\n                              </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <TextField\r\n                          label=\"Comment\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          value={credit.comment || ''}\r\n                          disabled={!!credit.creditDate}\r\n                          onChange={(e) => handleCreditPaymentChange(index, 'comment', e.target.value)}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <IconButton onClick={() => removeCreditPaymentRow(index)} color=\"secondary\" disabled={!!credit.creditDate}>\r\n                          <RemoveCircle />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                <Grid item xs={12}>\r\n                  <Button onClick={addCreditPaymentRow} color=\"primary\" startIcon={<AddCircle />}>\r\n                    Add Credit Payment\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n            <Button onClick={handleEstimateSave} color=\"secondary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n      {confirmDialogOpen && (\r\n        <Dialog open={confirmDialogOpen} onClose={handleCloseConfirmDialog}>\r\n          <DialogTitle>Confirm Remaining Amount</DialogTitle>\r\n          <DialogContent>\r\n            <p>\r\n              The remaining amount of <b>{remainingAmount}</b> will be added as CREDIT. Do you want to proceed?\r\n            </p>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleConfirmAddCredit} color=\"primary\">\r\n              Yes\r\n            </Button>\r\n            <Button onClick={handleCloseConfirmDialog} color=\"secondary\">\r\n              No\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nBillPayment.propTypes = {\r\n  estimate: PropTypes.object.isRequired,\r\n  setEstimate: PropTypes.func.isRequired,\r\n  paymentModes: PropTypes.array.isRequired,\r\n  estimateCreateOpen: PropTypes.bool.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  setAlertMess: PropTypes.func.isRequired,\r\n  setShowAlert: PropTypes.func.isRequired,\r\n  setAlertColor: PropTypes.func.isRequired\r\n};\r\nexport default BillPayment;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"\n}), 'RemoveCircle');"],"names":["_ref","estimate","setEstimate","paymentModes","estimateCreateOpen","handleClose","setAlertMess","setShowAlert","setAlertColor","confirmDialogOpen","setConfirmDialogOpen","useState","remainingAmount","setRemainingAmount","useEffect","handlePaymentSplitChange","index","field","value","updatedPaymentSplitList","paymentSplitList","currentSplit","updatedSplit","paymentId","flag","totalPaidExcludingCredit","filter","split","paymentMode","reduce","sum","paymentAmount","pendingAmount","grandTotal","prevState","creditFlag","some","addPaymentSplitRow","alert","handleCloseConfirmDialog","handleCreditPaymentChange","updatedCreditPaymentList","creditPaymentList","currentCredit","updatedCredit","_jsxs","_Fragment","children","Dialog","open","onClose","scroll","fullWidth","maxWidth","DialogTitle","id","sx","fontSize","vehicleRegNo","DialogContent","dividers","_jsx","Grid","container","direction","spacing","gridSpacing","item","xs","TextField","label","required","variant","map","alignItems","onChange","e","parseFloat","target","type","disabled","paymentDate","select","mode","MenuItem","IconButton","onClick","color","AddCircle","splice","removePaymentSplitRow","RemoveCircle","Typography","credit","amount","creditDate","comment","totalCreditPayments","c","newPendingAmount","creditSettledFlag","removeCreditPaymentRow","Button","addCreditPaymentRow","payment","cred","startIcon","DialogActions","async","activePaymentSplits","remaining","handleOpenConfirmDialog","activeCreditPayments","updatedEstimate","data","postRequest","estimateId","err","message","handleConfirmAddCredit","createSvgIcon","d"],"sourceRoot":""}