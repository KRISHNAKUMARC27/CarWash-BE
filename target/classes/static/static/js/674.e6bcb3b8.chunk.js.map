{"version":3,"file":"static/js/674.e6bcb3b8.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/OpenInNew.js","../node_modules/@mui/icons-material/esm/CurrencyRupee.js","../node_modules/@mui/icons-material/esm/RequestQuote.js","views/job/AllJobs.js","../node_modules/@mui/icons-material/esm/AddCircle.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"\n}), 'OpenInNew');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.66 7c-.56-1.18-1.76-2-3.16-2H6V3h12v2h-3.26c.48.58.84 1.26 1.05 2H18v2h-2.02c-.25 2.8-2.61 5-5.48 5h-.73l6.73 7h-2.77L7 14v-2h3.5c1.76 0 3.22-1.3 3.46-3H6V7h7.66z\"\n}), 'CurrencyRupee');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm1 10h-4v1h3c.55 0 1 .45 1 1v3c0 .55-.45 1-1 1h-1v1h-2v-1H9v-2h4v-1h-3c-.55 0-1-.45-1-1v-3c0-.55.45-1 1-1h1V9h2v1h2v2zm-2-4V3.5L17.5 8H13z\"\n}), 'RequestQuote');","import React, { useMemo, useState, useEffect } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport { DialogTitle, Button, FormControl, InputLabel, Select, MenuItem, IconButton, Tooltip } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\n//import DataRowDialog from 'utils/DataRowDialog';\r\nimport { OpenInNew, AddCircle, CurrencyRupee, RequestQuote } from '@mui/icons-material';\r\n//import Alert from 'views/utilities/Alert';\r\nimport { lazy } from 'react';\r\n\r\n// project imports\r\nimport { getRequest, putRequest } from 'utils/fetchRequest';\r\nimport Loadable from 'ui-component/Loadable';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nconst BillPayment = Loadable(lazy(() => import('views/invoice/BillPayment')));\r\nconst BillPaymentEstimate = Loadable(lazy(() => import('views/estimate/BillPayment')));\r\nconst JobView = Loadable(lazy(() => import('views/job/JobView')));\r\nconst JobCardCreate = Loadable(lazy(() => import('views/job/JobCardCreate')));\r\n\r\nconst StatusCell = ({ cell }) => (\r\n  <Box\r\n    component=\"span\"\r\n    sx={() => ({\r\n      cursor: 'pointer',\r\n      backgroundColor: cell.getValue() === 'OPEN' ? 'green' : 'red',\r\n      borderRadius: '0.35rem',\r\n      //color: \"#fff\",\r\n      maxWidth: '9ch',\r\n      p: '0.25rem'\r\n      //color: cell.getValue() === 'OPEN' ? 'green' : 'red'\r\n    })}\r\n  >\r\n    {cell.getValue()}\r\n  </Box>\r\n);\r\n\r\nconst AllJobs = () => {\r\n  const [data, setData] = useState([]);\r\n  const [jobStatusOpen, setJobStatusOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [jobInfoOpen, setJobInfoOpen] = useState(false);\r\n  const [jobCardCreateOpen, setJobCardCreateOpen] = useState(false);\r\n\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n  const invoiceRole = ['INVOICE', 'ADMIN', 'MANAGER'];\r\n  const estimateRole = ['ESTIMATE', 'ADMIN', 'MANAGER'];\r\n  const isAuthorizedForInvoice = roles.some((role) => invoiceRole.includes(role));\r\n  const isAuthorizedForEstimate = roles.some((role) => estimateRole.includes(role));\r\n  const isAuthorizedForOpeningClosedJobs = roles.some((role) => ['ADMIN'].includes(role));\r\n\r\n  const [invoiceCreateOpen, setInvoiceCreateOpen] = useState(false);\r\n  const [invoice, setInvoice] = useState();\r\n\r\n  const [estimateCreateOpen, setEstimateCreateOpen] = useState(false);\r\n  const [estimate, setEstimate] = useState();\r\n\r\n  const [paymentModes, setPaymentModes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAllJobsData();\r\n    getPaymentModes();\r\n\r\n    return () => {\r\n      setData([]);\r\n      setJobStatusOpen(false);\r\n      setSelectedRow({});\r\n      setJobInfoOpen(false);\r\n      setJobCardCreateOpen(false);\r\n      setPaymentModes([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllJobsData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/jobCard');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const getPaymentModes = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/config/paymentmodes');\r\n      setPaymentModes(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleJobStatusChange = (event) => {\r\n    const updatedData = { ...selectedRow, jobStatus: event.target.value };\r\n    setSelectedRow(updatedData);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedRow({});\r\n    setJobStatusOpen(false);\r\n    setJobInfoOpen(false);\r\n    setJobCardCreateOpen(false);\r\n    setInvoiceCreateOpen(false);\r\n    setEstimateCreateOpen(false);\r\n    setInvoice({});\r\n    setEstimate({});\r\n    fetchAllJobsData();\r\n  };\r\n\r\n  const handleSave = () => {\r\n    updateJobCard(selectedRow);\r\n    fetchAllJobsData();\r\n    handleClose();\r\n  };\r\n\r\n  const updateJobCard = async (payload) => {\r\n    if (payload.jobStatus === 'OPEN') {\r\n      if (!isAuthorizedForOpeningClosedJobs) {\r\n        setAlertMess('Not authorized to Re-Open the job');\r\n        setAlertColor('error');\r\n        setShowAlert(true);\r\n        return;\r\n      }\r\n    }\r\n    try {\r\n      await putRequest(process.env.REACT_APP_API_URL + '/jobCard/jobStatus', payload);\r\n      setSelectedRow({});\r\n      setJobStatusOpen(false);\r\n      fetchAllJobsData();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      setSelectedRow({});\r\n      setJobStatusOpen(false);\r\n    }\r\n  };\r\n\r\n  const prepareInitialInvoiceObject = async (payload) => {\r\n    if (payload.invoiceObjId != null) {\r\n      try {\r\n        const invoiceData = await getRequest(process.env.REACT_APP_API_URL + '/invoice/' + payload.invoiceObjId);\r\n\r\n        setInvoice(invoiceData);\r\n        setInvoiceCreateOpen(true);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        getSelectedRowJobSpares(payload);\r\n      }\r\n    } else {\r\n      getSelectedRowJobSpares(payload);\r\n    }\r\n  };\r\n\r\n  const prepareInitialEstimateObject = async (payload) => {\r\n    if (payload.estimateObjId != null) {\r\n      try {\r\n        const estimateData = await getRequest(process.env.REACT_APP_API_URL + '/estimate/' + payload.estimateObjId);\r\n\r\n        setEstimate(estimateData);\r\n        setEstimateCreateOpen(true);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        getSelectedRowJobSparesEstimate(payload);\r\n      }\r\n    } else {\r\n      getSelectedRowJobSparesEstimate(payload);\r\n    }\r\n  };\r\n\r\n  const getSelectedRowJobSpares = async (payload) => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/jobCard/jobSpares/' + payload.id);\r\n\r\n      // Combine updates into one `setInvoice` call\r\n      setInvoice((prevState) => ({\r\n        ...prevState,\r\n        jobId: payload.jobId,\r\n        ownerName: payload.ownerName,\r\n        ownerPhoneNumber: payload.ownerPhoneNumber,\r\n        vehicleRegNo: payload.vehicleRegNo,\r\n        vehicleName: payload.vehicleName,\r\n        grandTotal: data.grandTotalWithGST,\r\n        jobObjId: data.id,\r\n        paymentSplitList: [{ paymentAmount: data.grandTotalWithGST || 0, paymentMode: '' }],\r\n        creditPaymentList: []\r\n      }));\r\n\r\n      //setJobSpares(data);\r\n      setInvoiceCreateOpen(true);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const getSelectedRowJobSparesEstimate = async (payload) => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/jobCard/jobSpares/' + payload.id);\r\n\r\n      setEstimate((prevState) => ({\r\n        ...prevState,\r\n        jobId: payload.jobId,\r\n        ownerName: payload.ownerName,\r\n        ownerPhoneNumber: payload.ownerPhoneNumber,\r\n        vehicleRegNo: payload.vehicleRegNo,\r\n        vehicleName: payload.vehicleName,\r\n        grandTotal: data.grandTotal,\r\n        jobObjId: data.id,\r\n        paymentSplitList: [{ paymentAmount: data.grandTotal || 0, paymentMode: '' }],\r\n        creditPaymentList: []\r\n      }));\r\n\r\n      setEstimateCreateOpen(true);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'jobId', //access nested data with dot notation\r\n        header: 'JobCard No.',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'jobStatus', //access nested data with dot notation\r\n        header: 'Status',\r\n        size: 50,\r\n        filterVariant: 'select',\r\n        filterSelectOptions: ['OPEN', 'CLOSED', 'CANCELLED'],\r\n        Header: <i style={{ color: 'blue' }}>Status</i>,\r\n        Cell: StatusCell,\r\n        muiTableBodyCellProps: ({ cell }) => ({\r\n          onClick: () => {\r\n            //console.log(cell);\r\n            //console.log(cell.row.original);\r\n            setSelectedRow(cell.row.original);\r\n            setJobStatusOpen(true);\r\n          }\r\n        })\r\n      },\r\n      {\r\n        accessorKey: 'ownerName', //access nested data with dot notation\r\n        header: 'Owner',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'ownerPhoneNumber', //normal accessorKey\r\n        header: 'Phone',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'vehicleRegNo',\r\n        header: 'Reg. No.',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'vehicleName',\r\n        header: 'Vehicle',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'kiloMeters',\r\n        header: 'kiloMeters',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'jobCreationDate',\r\n        header: 'Job Open Date',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'jobCloseDate',\r\n        header: 'Job Closed Date',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'ownerAddress',\r\n        header: 'Address',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'nextFreeCheckKms',\r\n        header: 'Next FreeCheck KMs',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'nextServiceKms',\r\n        header: 'Next Service KMs',\r\n        size: 50\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#fff';\r\n  const color2 = '#c38b81';\r\n\r\n  return (\r\n    <div>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          editingMode=\"modal\"\r\n          enableEditing\r\n          initialState={{\r\n            pagination: { pageSize: 10 } // Set default rows per page to 5\r\n          }}\r\n          muiTablePaperProps={{\r\n            elevation: 0, //change the mui box shadow\r\n            //customize paper styles\r\n            sx: {\r\n              borderRadius: '0',\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          // muiTableBodyRowProps={({ row }) => ({\r\n          //   onClick: () => {\r\n          //     //console.log(JSON.stringify(row));\r\n          //     setSelectedRow(row.original);\r\n          //     setJobInfoOpen(true);\r\n          //   },\r\n          //   // sx: { cursor: 'pointer' }\r\n          // })}\r\n          renderRowActions={({ row }) => (\r\n            <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n              <Tooltip arrow placement=\"right\" title=\"View Job Card\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    setSelectedRow(row.original);\r\n                    setJobInfoOpen(true);\r\n                  }}\r\n                >\r\n                  <OpenInNew />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Tooltip arrow placement=\"right\" title=\"Create Job Card\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    setSelectedRow(row.original);\r\n                    setJobCardCreateOpen(true);\r\n                  }}\r\n                >\r\n                  <AddCircle />\r\n                </IconButton>\r\n              </Tooltip>\r\n              {isAuthorizedForInvoice && row.original.jobStatus === 'CLOSED' && (\r\n                <Tooltip arrow placement=\"right\" title=\"Invoice\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      setSelectedRow(row.original);\r\n                      prepareInitialInvoiceObject(row.original);\r\n                    }}\r\n                  >\r\n                    <CurrencyRupee />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              )}\r\n              {isAuthorizedForEstimate && row.original.jobStatus === 'CLOSED' && (\r\n                <Tooltip arrow placement=\"right\" title=\"Estimate\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      setSelectedRow(row.original);\r\n                      prepareInitialEstimateObject(row.original);\r\n                    }}\r\n                  >\r\n                    <RequestQuote />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              )}\r\n            </Box>\r\n          )}\r\n        />{' '}\r\n      </ThemeProvider>\r\n      {jobStatusOpen && (\r\n        <Dialog\r\n          open={jobStatusOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n        >\r\n          <Box\r\n            sx={{\r\n              bgcolor: '#f44336',\r\n              color: '#FFFFFF',\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              padding: '0.75rem 1.25rem'\r\n            }}\r\n          >\r\n            <DialogTitle id=\"scroll-dialog-title\" sx={{ flexGrow: 1, fontSize: '1.5rem', color: 'white' }}>\r\n              {selectedRow.vehicleRegNo}\r\n            </DialogTitle>\r\n          </Box>\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <FormControl variant=\"outlined\" style={{ margin: '1px 0' }}>\r\n              <InputLabel>Job Status</InputLabel>\r\n              <Select value={selectedRow?.jobStatus || ''} onChange={handleJobStatusChange} label=\"Status\">\r\n                <MenuItem value=\"CLOSED\">CLOSED</MenuItem>\r\n                <MenuItem value=\"OPEN\">OPEN</MenuItem>\r\n                <MenuItem value=\"CANCELLED\">CANCELLED</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n            <Button onClick={handleSave} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n      {jobCardCreateOpen && (\r\n        <Dialog\r\n          open={jobCardCreateOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n          fullWidth\r\n          maxWidth=\"lg\"\r\n        >\r\n          <Box\r\n            sx={{\r\n              bgcolor: '#f44336',\r\n              color: '#FFFFFF',\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              padding: '0.75rem 1.25rem'\r\n            }}\r\n          >\r\n            <DialogTitle id=\"scroll-dialog-title\" sx={{ flexGrow: 1, fontSize: '1.5rem', color: 'white' }}>\r\n              New JobCard for {selectedRow.vehicleRegNo}\r\n            </DialogTitle>\r\n          </Box>\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <JobCardCreate data={selectedRow} />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n      {jobInfoOpen && <JobView open={jobInfoOpen} onClose={handleClose} job={selectedRow} />}\r\n      {invoiceCreateOpen && (\r\n        <BillPayment\r\n          invoice={invoice}\r\n          setInvoice={setInvoice}\r\n          paymentModes={paymentModes}\r\n          invoiceCreateOpen={invoiceCreateOpen}\r\n          handleClose={handleClose}\r\n          setAlertMess={setAlertMess}\r\n          setShowAlert={setShowAlert}\r\n          setAlertColor={setAlertColor}\r\n        />\r\n      )}\r\n      {estimateCreateOpen && (\r\n        <BillPaymentEstimate\r\n          estimate={estimate}\r\n          setEstimate={setEstimate}\r\n          paymentModes={paymentModes}\r\n          estimateCreateOpen={estimateCreateOpen}\r\n          handleClose={handleClose}\r\n          setAlertMess={setAlertMess}\r\n          setShowAlert={setShowAlert}\r\n          setAlertColor={setAlertColor}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatusCell.propTypes = {\r\n  cell: PropTypes.shape({\r\n    getValue: PropTypes.func.isRequired\r\n  }).isRequired\r\n};\r\n\r\nexport default AllJobs;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');"],"names":["createSvgIcon","_jsx","d","BillPayment","Loadable","lazy","BillPaymentEstimate","JobView","JobCardCreate","StatusCell","_ref","cell","Box","component","sx","cursor","backgroundColor","getValue","borderRadius","maxWidth","p","children","AllJobs","data","setData","useState","jobStatusOpen","setJobStatusOpen","selectedRow","setSelectedRow","jobInfoOpen","setJobInfoOpen","jobCardCreateOpen","setJobCardCreateOpen","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","roles","JSON","parse","localStorage","getItem","invoiceRole","estimateRole","isAuthorizedForInvoice","some","role","includes","isAuthorizedForEstimate","isAuthorizedForOpeningClosedJobs","invoiceCreateOpen","setInvoiceCreateOpen","invoice","setInvoice","estimateCreateOpen","setEstimateCreateOpen","estimate","setEstimate","paymentModes","setPaymentModes","useEffect","fetchAllJobsData","getPaymentModes","async","getRequest","err","console","error","message","log","handleClose","updateJobCard","payload","jobStatus","putRequest","getSelectedRowJobSpares","id","prevState","jobId","ownerName","ownerPhoneNumber","vehicleRegNo","vehicleName","grandTotal","grandTotalWithGST","jobObjId","paymentSplitList","paymentAmount","paymentMode","creditPaymentList","getSelectedRowJobSparesEstimate","columns","useMemo","accessorKey","header","size","filterVariant","filterSelectOptions","Header","style","color","Cell","muiTableBodyCellProps","_ref2","onClick","row","original","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","_jsxs","AlertDialog","ThemeProvider","theme","MaterialReactTable","editingMode","enableEditing","initialState","pagination","pageSize","muiTablePaperProps","elevation","renderRowActions","_ref3","display","gap","Tooltip","arrow","placement","title","IconButton","OpenInNew","AddCircle","invoiceObjId","invoiceData","prepareInitialInvoiceObject","CurrencyRupee","estimateObjId","estimateData","prepareInitialEstimateObject","RequestQuote","Dialog","open","onClose","scroll","bgcolor","justifyContent","alignItems","padding","DialogTitle","flexGrow","DialogContent","dividers","FormControl","variant","margin","InputLabel","Select","value","onChange","event","updatedData","target","label","MenuItem","DialogActions","Button","handleSave","fullWidth","job"],"sourceRoot":""}