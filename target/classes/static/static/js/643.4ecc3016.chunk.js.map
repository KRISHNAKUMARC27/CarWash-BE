{"version":3,"file":"static/js/643.4ecc3016.chunk.js","mappings":"mSAoQA,UA1PA,SAAqBA,GAAqD,IAApD,KAAEC,EAAI,oBAAEC,EAAmB,mBAAEC,GAAoBH,EACrE,MAAOI,EAAeC,IAAoBC,EAAAA,EAAAA,UAASL,GAAQ,CAAC,IACrDM,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,KACtDG,EAAWC,GAAgBC,EAAAA,UAAe,IAC1CC,EAAWC,GAAgBF,EAAAA,SAAe,KAC1CG,EAAYC,GAAiBJ,EAAAA,SAAe,KAEnDK,EAAAA,EAAAA,YAAU,KACRC,IAEO,KACLZ,EAAiB,CAAC,GAClBG,EAAsB,GAAG,IAE1B,KAEHQ,EAAAA,EAAAA,YAAU,KACRX,EAAiBJ,GAAQ,CAAC,EAAE,GAC3B,CAACA,IAEJ,MAAMgB,EAAiCC,UACrC,IACE,MAAMjB,QAAakB,EAAAA,EAAAA,IAA2C,0BAC9DX,EAAsBP,EAGxB,CAFE,MAAOmB,GACPC,QAAQC,MAAMF,EAAIG,QACpB,GA6GF,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,MAAM,uBAAsBH,UACpCD,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAASC,EAAAA,GAAYR,SAAA,EACnDD,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,SAAA,EACfC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,GAAG,oBAAoBC,UAAQ,EAAAb,SAAC,mBAG5CC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLC,QAAQ,oBACRH,GAAG,oBACHI,MAAOrC,EAAcsC,UAAY,GACjCC,MAAM,gBACNC,SA7EkBC,IAC5B,MAAMC,EAAc,IAAK1C,EAAesC,SAAUG,EAAME,OAAON,OAC/DpC,EAAiByC,EAAY,EA2EYrB,SAE9BlB,EAAmByC,KAAKC,IACvBvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAQ,CAAiBT,MAAOQ,EAAOP,SAASjB,SAC9CwB,EAAOP,UADKO,EAAOZ,YAM5Bb,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,SAAA,EACfC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRR,MAAM,eACNL,UAAQ,EACRc,QAAQ,WACRX,MAAOrC,EAAciD,YAAc,GACnCT,SAzFoBC,IAC9B,MAAMC,EAAc,IAAK1C,EAAeiD,WAAYR,EAAME,OAAON,OACjEpC,EAAiByC,EAAY,QA0FvBtB,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,SAAA,EACfC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRR,MAAM,qBACNL,UAAQ,EACRc,QAAQ,WACRE,WAAS,EACTb,MAAOrC,EAAcmD,MAAQ,GAC7BX,SAhGcC,IACxB,MAAMC,EAAc,IAAK1C,EAAemD,KAAMV,EAAME,OAAON,OAC3DpC,EAAiByC,EAAY,QAiGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,WAAWL,UAAQ,EAACc,QAAQ,WAAWX,MAAOrC,EAAcoD,KAAO,GAAIZ,SA5FzEC,IACvB,MAAMW,EAAMX,EAAME,OAAON,MACnBgB,EAASC,WAAWF,IAAQE,WAAWtD,EAAcuD,WAAa,GAClEC,EAAgBF,WAAWD,EAAOI,QAAQ,IAC1Cf,EAAc,IAAK1C,EAAeoD,IAAKA,EAAKC,OAAQK,MAAMF,GAAiB,GAAKA,GACtFvD,EAAiByC,EAAY,OAyFvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRR,MAAM,oBACNL,UAAQ,EACRc,QAAQ,WACRX,MAAOrC,EAAc2D,WAAa,GAClCnB,SAzEmBC,IAC7B,MAAMC,EAAc,IAAK1C,EAAe2D,UAAWlB,EAAME,OAAON,OAChEpC,EAAiByC,EAAY,OA0EvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRR,MAAM,gBACNL,UAAQ,EACRc,QAAQ,WACRX,MAAOrC,EAAc4D,cAAgB,GACrCpB,SAjHsBC,IAChC,MAAMC,EAAc,IAAK1C,EAAe4D,aAAcnB,EAAME,OAAON,OACnEpC,EAAiByC,EAAY,OAkHvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,YAAYL,UAAQ,EAACc,QAAQ,WAAWX,MAAOrC,EAAcuD,UAAY,GAAIf,SA1G1EC,IAC5B,MAAMc,EAAWd,EAAME,OAAON,MACxBgB,GAAUC,WAAWC,IAAa,GAAKD,WAAWtD,EAAcoD,KAAO,GACvEI,EAAgBF,WAAWD,EAAOI,QAAQ,IAC1Cf,EAAc,IAAK1C,EAAeuD,SAAUA,EAAUF,OAAQK,MAAMF,GAAiB,GAAKA,GAChGvD,EAAiByC,EAAY,OAuGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,OAAOL,UAAQ,EAACc,QAAQ,WAAWX,MAAOrC,EAAc6D,MAAQ,GAAIrB,SAtGrEC,IACxB,MAAMC,EAAc,IAAK1C,EAAe6D,KAAMpB,EAAME,OAAON,OAC3DpC,EAAiByC,EAAY,OAsGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,OAAOL,UAAQ,EAACc,QAAQ,WAAWX,MAAOrC,EAAc8D,MAAQ,GAAItB,SArGrEC,IACxB,MAAMC,EAAc,IAAK1C,EAAe8D,KAAMrB,EAAME,OAAON,OAC3DpC,EAAiByC,EAAY,OAqGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRR,MAAM,SACNS,QAAQ,WACRX,MAAOrC,EAAcqD,QAAU,GAC/BU,WAAY,CACVC,UAAU,QAIhB1C,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,WAAWS,QAAQ,WAAWE,WAAS,EAACb,MAAOrC,EAAciE,MAAQ,GAAIzB,SArG1EC,IACxB,MAAMC,EAAc,IAAK1C,EAAeiE,KAAMxB,EAAME,OAAON,OAC3DpC,EAAiByC,EAAY,OAqGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,SAASS,QAAQ,WAAWE,WAAS,EAACb,MAAOrC,EAAckE,OAAS,GAAI1B,SApGxEC,IACzB,MAAMC,EAAc,IAAK1C,EAAekE,MAAOzB,EAAME,OAAON,OAC5DpC,EAAiByC,EAAY,OAoGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,QAAQS,QAAQ,WAAWE,WAAS,EAACb,MAAOrC,EAAcmE,OAAS,GAAI3B,SAnGvEC,IACzB,MAAMC,EAAc,IAAK1C,EAAemE,MAAO1B,EAAME,OAAON,OAC5DpC,EAAiByC,EAAY,OAmGvBpB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEV,UACfC,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAACR,MAAM,MAAMS,QAAQ,WAAWE,WAAS,EAACb,MAAOrC,EAAcoE,OAAS,GAAI5B,SAlGrEC,IACzB,MAAMC,EAAc,IAAK1C,EAAeoE,MAAO3B,EAAME,OAAON,OAC5DpC,EAAiByC,EAAY,YAoG3BpB,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAK+C,UAAU,UAAShD,SA1MxBrB,EAAcsC,UACdtC,EAAciD,YACdjD,EAAcmD,MACiB,OAA/BnD,EAAc4D,mBACiBU,IAA/BtE,EAAc4D,cACQ,OAAtB5D,EAAcoD,UACQkB,IAAtBtE,EAAcoD,KACa,OAA3BpD,EAAcuD,eACae,IAA3BtE,EAAcuD,UACS,OAAvBvD,EAAc6D,WACSS,IAAvBtE,EAAc6D,MACS,OAAvB7D,EAAc8D,WACSQ,IAAvBtE,EAAc8D,MACW,OAAzB9D,EAAcqD,aACWiB,IAAzBtE,EAAcqD,QACdrD,EAAc2D,YA6LVrC,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACvB,QAAQ,YAAYwB,MAAM,QAAQC,QAASA,IAzL/B3D,WAC1B,IACE,MAAMjB,QAAa6E,EAAAA,EAAAA,IAA4C,UAAWC,GACtE5E,GACFA,IAEED,GACFA,GAAoB,GAEtBW,EAAaZ,EAAKsD,KAAO,wBACzBxC,EAAc,WACdL,GAAa,GACbW,QAAQ2D,IAAI/E,EAMd,CALE,MAAOmB,GACPC,QAAQ2D,IAAI5D,EAAIG,SAChBV,EAAaO,EAAIG,SACjBR,EAAc,QACdL,GAAa,EACf,GAuK+DuE,CAAoB7E,GAAeqB,SAAC,wBAKhGhB,IAAaiB,EAAAA,EAAAA,KAACwD,EAAAA,EAAW,CAACzE,UAAWA,EAAWC,aAAcA,EAAcI,WAAYA,EAAYF,UAAWA,MAGtH,C","sources":["views/spares/SparesCreate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TextField, InputLabel, Select, MenuItem, Grid, Button } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nfunction SparesCreate({ data, setSparesUpdateOpen, fetchAllSparesData }) {\r\n  const [sparesDetails, setSparesDetails] = useState(data || {});\r\n  const [sparesCategoryList, setSparesCategoryList] = useState([]);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  useEffect(() => {\r\n    fetchAllSparesCategoryListData();\r\n\r\n    return () => {\r\n      setSparesDetails({});\r\n      setSparesCategoryList([]);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSparesDetails(data || {});\r\n  }, [data]);\r\n\r\n  const fetchAllSparesCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares/sparesCategory');\r\n      setSparesCategoryList(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isSparesComplete() {\r\n    return (\r\n      sparesDetails.category &&\r\n      sparesDetails.partNumber &&\r\n      sparesDetails.desc &&\r\n      sparesDetails.purchaseRate !== null &&\r\n      sparesDetails.purchaseRate !== undefined &&\r\n      sparesDetails.qty !== null &&\r\n      sparesDetails.qty !== undefined &&\r\n      sparesDetails.sellRate !== null &&\r\n      sparesDetails.sellRate !== undefined &&\r\n      sparesDetails.cgst !== null &&\r\n      sparesDetails.cgst !== undefined &&\r\n      sparesDetails.sgst !== null &&\r\n      sparesDetails.sgst !== undefined &&\r\n      sparesDetails.amount !== null &&\r\n      sparesDetails.amount !== undefined &&\r\n      sparesDetails.minThresh\r\n    );\r\n  }\r\n\r\n  const saveSparesInventory = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/spares', payload);\r\n      if (fetchAllSparesData) {\r\n        fetchAllSparesData();\r\n      }\r\n      if (setSparesUpdateOpen) {\r\n        setSparesUpdateOpen(false);\r\n      }\r\n      setAlertMess(data.desc + ' added successfully ');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (event) => {\r\n    const updatedData = { ...sparesDetails, category: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handlePartNumberChange = (event) => {\r\n    const updatedData = { ...sparesDetails, partNumber: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleDescChange = (event) => {\r\n    const updatedData = { ...sparesDetails, desc: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handlePurchaseRateChange = (event) => {\r\n    const updatedData = { ...sparesDetails, purchaseRate: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleQtyChange = (event) => {\r\n    const qty = event.target.value; // Keep as string to allow decimal input\r\n    const amount = parseFloat(qty) * (parseFloat(sparesDetails.sellRate) || 0);\r\n    const roundedAmount = parseFloat(amount.toFixed(2)); // rounding to 2 decimal places\r\n    const updatedData = { ...sparesDetails, qty: qty, amount: isNaN(roundedAmount) ? '' : roundedAmount };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleSellRateChange = (event) => {\r\n    const sellRate = event.target.value; // Keep as string to allow decimal input\r\n    const amount = (parseFloat(sellRate) || 0) * parseFloat(sparesDetails.qty || 0);\r\n    const roundedAmount = parseFloat(amount.toFixed(2)); // rounding to 2 decimal places\r\n    const updatedData = { ...sparesDetails, sellRate: sellRate, amount: isNaN(roundedAmount) ? '' : roundedAmount };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleCGSTChange = (event) => {\r\n    const updatedData = { ...sparesDetails, cgst: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleSGSTChange = (event) => {\r\n    const updatedData = { ...sparesDetails, sgst: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n\r\n  // const handleAmountChange = (event) => {\r\n  //   const updatedData = { ...sparesDetails, amount: event.target.value };\r\n  //   setSparesDetails(updatedData);\r\n  // };\r\n  const handleMinThreshChange = (event) => {\r\n    const updatedData = { ...sparesDetails, minThresh: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleRackChange = (event) => {\r\n    const updatedData = { ...sparesDetails, rack: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleMisc1Change = (event) => {\r\n    const updatedData = { ...sparesDetails, misc1: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleMisc2Change = (event) => {\r\n    const updatedData = { ...sparesDetails, misc2: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n  const handleMisc3Change = (event) => {\r\n    const updatedData = { ...sparesDetails, misc3: event.target.value };\r\n    setSparesDetails(updatedData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Enter Spares Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={3}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Category Type\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-select-small\"\r\n              id=\"demo-select-small\"\r\n              value={sparesDetails.category || ''}\r\n              label=\"Category Type\"\r\n              onChange={handleCategoryChange}\r\n            >\r\n              {sparesCategoryList.map((option) => (\r\n                <MenuItem key={option.id} value={option.category}>\r\n                  {option.category}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"PartNo./Type\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={sparesDetails.partNumber || ''}\r\n              onChange={handlePartNumberChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Spares Description\"\r\n              required\r\n              variant=\"standard\"\r\n              fullWidth\r\n              value={sparesDetails.desc || ''}\r\n              onChange={handleDescChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Quantity\" required variant=\"outlined\" value={sparesDetails.qty || ''} onChange={handleQtyChange} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Minimum Threshold\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={sparesDetails.minThresh || ''}\r\n              onChange={handleMinThreshChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Purchase Rate\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={sparesDetails.purchaseRate || ''}\r\n              onChange={handlePurchaseRateChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Sell Rate\" required variant=\"outlined\" value={sparesDetails.sellRate || ''} onChange={handleSellRateChange} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"CGST\" required variant=\"outlined\" value={sparesDetails.cgst || ''} onChange={handleCGSTChange} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"SGST\" required variant=\"outlined\" value={sparesDetails.sgst || ''} onChange={handleSGSTChange} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Amount\"\r\n              variant=\"standard\"\r\n              value={sparesDetails.amount || ''}\r\n              InputProps={{\r\n                readOnly: true\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Rack/Bin\" variant=\"standard\" fullWidth value={sparesDetails.rack || ''} onChange={handleRackChange} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Misc 1\" variant=\"standard\" fullWidth value={sparesDetails.misc1 || ''} onChange={handleMisc1Change} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"Units\" variant=\"standard\" fullWidth value={sparesDetails.misc2 || ''} onChange={handleMisc2Change} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField label=\"MRP\" variant=\"standard\" fullWidth value={sparesDetails.misc3 || ''} onChange={handleMisc3Change} />\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      <br></br>\r\n      <div className=\"content\">\r\n        {isSparesComplete() && (\r\n          <Button variant=\"contained\" color=\"error\" onClick={() => saveSparesInventory(sparesDetails)}>\r\n            Add/Update Spares\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nSparesCreate.propTypes = {\r\n  data: PropTypes.object,\r\n  setSparesUpdateOpen: PropTypes.func,\r\n  fetchAllSparesData: PropTypes.func\r\n};\r\nexport default SparesCreate;\r\n"],"names":["_ref","data","setSparesUpdateOpen","fetchAllSparesData","sparesDetails","setSparesDetails","useState","sparesCategoryList","setSparesCategoryList","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","fetchAllSparesCategoryListData","async","getRequest","err","console","error","message","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","InputLabel","id","required","Select","labelId","value","category","label","onChange","event","updatedData","target","map","option","MenuItem","TextField","variant","partNumber","fullWidth","desc","qty","amount","parseFloat","sellRate","roundedAmount","toFixed","isNaN","minThresh","purchaseRate","cgst","sgst","InputProps","readOnly","rack","misc1","misc2","misc3","className","undefined","Button","color","onClick","postRequest","payload","log","saveSparesInventory","AlertDialog"],"sourceRoot":""}