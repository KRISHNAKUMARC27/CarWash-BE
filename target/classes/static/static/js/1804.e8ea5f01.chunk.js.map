{"version":3,"file":"static/js/1804.e8ea5f01.chunk.js","mappings":"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","sources":["views/expense/ExpenseCategory.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button, TextField, Grid, IconButton, Tooltip } from '@mui/material';\r\nimport { Edit, Delete } from '@mui/icons-material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, deleteRequest, postRequest, putRequestNotStringify } from 'utils/fetchRequest';\r\n\r\nfunction ExpenseCategory() {\r\n  const [expenseCategory, setExpenseCategory] = useState({});\r\n  const [expenseCategoryList, setExpenseCategoryList] = useState([]);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n  const [editRowIndex, setEditRowIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllExpenseCategoryListData();\r\n\r\n    return () => {\r\n      setExpenseCategory({});\r\n      setExpenseCategoryList([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllExpenseCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/expense/expenseCategory');\r\n      const enhancedData = data.map((item) => ({\r\n        ...item,\r\n        _originalCategory: item.category\r\n      }));\r\n      setExpenseCategoryList(enhancedData);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isExpenseCategoryComplete() {\r\n    return expenseCategory.category;\r\n  }\r\n\r\n  const submitExpenseCategory = () => {\r\n    const expenseCat = {\r\n      category: expenseCategory.category\r\n    };\r\n    saveExpenseCategory(expenseCat);\r\n  };\r\n\r\n  const saveExpenseCategory = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/expense/saveExpenseCategory', payload);\r\n      setAlertMess('ExpenseCategory ' + data.category + ' created successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setExpenseCategory({});\r\n      fetchAllExpenseCategoryListData();\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (event) => {\r\n    const updatedData = { ...expenseCategory, category: event.target.value };\r\n    setExpenseCategory(updatedData);\r\n  };\r\n\r\n  const handleRowDelete = async (rowIndex) => {\r\n    try {\r\n      const data = await deleteRequest(process.env.REACT_APP_API_URL + '/expense/expenseCategory/' + rowIndex);\r\n      setAlertMess('ExpenseCategory ' + data.category + ' deleted successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      fetchAllExpenseCategoryListData();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (newValue, index, column) => {\r\n    const updatedRows = [...expenseCategoryList];\r\n    updatedRows[index][column] = newValue;\r\n    setExpenseCategoryList(updatedRows);\r\n    setEditRowIndex(index); // mark which row is being edited\r\n  };\r\n\r\n  const updateExpenseCategory = async () => {\r\n    if (editRowIndex === null) return;\r\n\r\n    const oldCategory = expenseCategoryList[editRowIndex]._originalCategory || '';\r\n    const newCategory = expenseCategoryList[editRowIndex].category;\r\n    try {\r\n      const data = await putRequestNotStringify(\r\n        process.env.REACT_APP_API_URL + '/expense/expenseCategory/' + oldCategory + '/' + newCategory,\r\n        {}\r\n      );\r\n      setAlertMess('ExpenseCategory ' + data.category + ' updated successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setEditRowIndex(null); // reset the edit row index\r\n      fetchAllExpenseCategoryListData();\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Expense Category Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Enter Expense Category\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={expenseCategory.category || ''}\r\n              onChange={handleCategoryChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <br></br>\r\n            <div className=\"content\">\r\n              {isExpenseCategoryComplete() && (\r\n                <Button variant=\"contained\" color=\"error\" onClick={() => submitExpenseCategory()}>\r\n                  Create Expense Category\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n              <div style={{ overflowX: 'auto' }}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Expense Category</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {expenseCategoryList.map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        {/* <TableCell>{row?.category}</TableCell> */}\r\n                        <TableCell>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            value={row?.category || ''}\r\n                            onChange={(e) => handleInputChange(e.target.value, index, 'category')}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Tooltip arrow placement=\"right\" title=\"Update\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                updateExpenseCategory();\r\n                              }}\r\n                            >\r\n                              <Edit />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                handleRowDelete(row.id);\r\n                              }}\r\n                            >\r\n                              <Delete />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseCategory;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');"],"names":["expenseCategory","setExpenseCategory","useState","expenseCategoryList","setExpenseCategoryList","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","editRowIndex","setEditRowIndex","useEffect","fetchAllExpenseCategoryListData","async","enhancedData","getRequest","map","item","_originalCategory","category","err","console","error","message","saveExpenseCategory","data","postRequest","payload","log","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","xs","TextField","label","required","variant","value","onChange","event","updatedData","target","className","Button","color","onClick","submitExpenseCategory","expenseCat","style","overflowX","Table","TableHead","TableRow","TableCell","TableBody","row","index","e","handleInputChange","newValue","column","updatedRows","Tooltip","arrow","placement","IconButton","oldCategory","newCategory","putRequestNotStringify","updateExpenseCategory","Edit","deleteRequest","rowIndex","handleRowDelete","id","Delete","AlertDialog","createSvgIcon","d"],"sourceRoot":""}