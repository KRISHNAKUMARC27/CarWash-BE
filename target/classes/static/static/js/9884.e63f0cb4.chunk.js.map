{"version":3,"file":"static/js/9884.e63f0cb4.chunk.js","mappings":"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","sources":["views/employee/EmployeeCreate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TextField, InputLabel, Select, MenuItem, Grid, Button } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nfunction EmployeeCreate({ data, setEmployeeUpdateOpen, fetchAllEmployeeData }) {\r\n  const [employeeDetails, setEmployeeDetails] = useState(data || {});\r\n  const [departmentList, setDepartmentList] = useState([]);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  const salaryModes = ['HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY'];\r\n  const statusList = ['ACTIVE', 'IN-ACTIVE'];\r\n\r\n  useEffect(() => {\r\n    fetchAllDepartmentListData();\r\n\r\n    return () => {\r\n      setEmployeeDetails({});\r\n      setDepartmentList([]);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setEmployeeDetails(data || {});\r\n  }, [data]);\r\n\r\n  const fetchAllDepartmentListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/employee/department');\r\n      setDepartmentList(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isDepartmentComplete() {\r\n    return (\r\n      employeeDetails.name &&\r\n      employeeDetails.phone &&\r\n      employeeDetails.department &&\r\n      employeeDetails.status &&\r\n      employeeDetails.salaryType &&\r\n      employeeDetails.salary !== null &&\r\n      employeeDetails.salary !== undefined\r\n    );\r\n  }\r\n\r\n  const saveEmployee = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/employee', payload);\r\n      if (fetchAllEmployeeData) {\r\n        fetchAllEmployeeData();\r\n      }\r\n      if (setEmployeeUpdateOpen) {\r\n        setEmployeeUpdateOpen(false);\r\n      }\r\n      setAlertMess(data.name + ' added successfully ');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    const updatedData = { ...employeeDetails, [field]: value };\r\n    setEmployeeDetails(updatedData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Enter Employee Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Department\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-select-small\"\r\n              id=\"demo-select-small\"\r\n              value={employeeDetails.department || ''}\r\n              label=\"Category Type\"\r\n              onChange={(e) => handleInputChange('department', e.target.value)}\r\n            >\r\n              {departmentList.map((option) => (\r\n                <MenuItem key={option.id} value={option.departmentName}>\r\n                  {option.departmentName}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Employee Name\"\r\n              required\r\n              variant=\"standard\"\r\n              value={employeeDetails.name || ''}\r\n              onChange={(e) => handleInputChange('name', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Phone\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={employeeDetails.phone || ''}\r\n              onChange={(e) => handleInputChange('phone', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Designation\"\r\n              variant=\"outlined\"\r\n              value={employeeDetails.designation || ''}\r\n              onChange={(e) => handleInputChange('designation', e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Salary Type\r\n            </InputLabel>\r\n            <TextField\r\n              select\r\n              variant=\"outlined\"\r\n              required\r\n              value={employeeDetails.salaryType || ''}\r\n              onChange={(e) => handleInputChange('salaryType', e.target.value)}\r\n            >\r\n              {salaryModes.map((mode) => (\r\n                <MenuItem key={mode} value={mode}>\r\n                  {mode}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Salary Settlement Type\r\n            </InputLabel>\r\n            <TextField\r\n              select\r\n              variant=\"outlined\"\r\n              required\r\n              value={employeeDetails.salarySettlementType || ''}\r\n              onChange={(e) => handleInputChange('salarySettlementType', e.target.value)}\r\n            >\r\n              {salaryModes\r\n                .filter((mode) => mode !== 'HOURLY')\r\n                .map((mode) => (\r\n                  <MenuItem key={mode} value={mode}>\r\n                    {mode}\r\n                  </MenuItem>\r\n                ))}\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              label=\"Salary\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={employeeDetails.salary || ''}\r\n              onChange={(e) => handleInputChange('salary', parseFloat(e.target.value) || 0)}\r\n              type=\"number\"\r\n              inputProps={{ min: 0 }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <InputLabel id=\"demo-select-small\" required>\r\n              Employement Status\r\n            </InputLabel>\r\n            <TextField\r\n              select\r\n              variant=\"outlined\"\r\n              required\r\n              value={employeeDetails.status || ''}\r\n              onChange={(e) => handleInputChange('status', e.target.value)}\r\n            >\r\n              {statusList.map((status) => (\r\n                <MenuItem key={status} value={status}>\r\n                  {status}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      <br></br>\r\n      <div className=\"content\">\r\n        {isDepartmentComplete() && (\r\n          <Button variant=\"contained\" color=\"error\" onClick={() => saveEmployee(employeeDetails)}>\r\n            Add/Update Employee\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nEmployeeCreate.propTypes = {\r\n  data: PropTypes.object,\r\n  setEmployeeUpdateOpen: PropTypes.func,\r\n  fetchAllEmployeeData: PropTypes.func\r\n};\r\nexport default EmployeeCreate;\r\n"],"names":["_ref","data","setEmployeeUpdateOpen","fetchAllEmployeeData","employeeDetails","setEmployeeDetails","useState","departmentList","setDepartmentList","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","salaryModes","useEffect","fetchAllDepartmentListData","async","getRequest","err","console","error","message","handleInputChange","field","value","updatedData","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","item","xs","InputLabel","id","required","Select","labelId","department","label","onChange","e","target","map","option","MenuItem","departmentName","TextField","variant","name","phone","designation","select","salaryType","mode","salarySettlementType","filter","salary","parseFloat","type","inputProps","min","status","className","undefined","Button","color","onClick","postRequest","payload","log","saveEmployee","AlertDialog"],"sourceRoot":""}