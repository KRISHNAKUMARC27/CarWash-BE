{"version":3,"file":"static/js/8905.11756449.chunk.js","mappings":"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","sources":["views/financials/PaymentsReports.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\nimport { getRequest } from 'utils/fetchRequest';\r\nimport { Tabs, Tab, Typography, Grid, Button } from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport dayjs from 'dayjs';\r\nimport { Chart as ChartJS, ArcElement, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport isoWeek from 'dayjs/plugin/isoWeek';\r\ndayjs.extend(isoWeek);\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend);\r\n\r\nconst PaymentsReports = () => {\r\n  const [paymentsData, setPaymentsData] = useState({});\r\n\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  const [startDate, setStartDate] = useState(dayjs().subtract(7, 'day')); // Default: Last 7 days\r\n  const [endDate, setEndDate] = useState(dayjs()); // Default: Today\r\n\r\n  useEffect(() => {\r\n    fetchPaymentsData('daily', dayjs().format('YYYY-MM-DD'));\r\n  }, []);\r\n\r\n  const fetchPaymentsData = async (type, param) => {\r\n    try {\r\n      const url = `${process.env.REACT_APP_API_URL}/payments/report/${type}/${param}`;\r\n      const data = await getRequest(url);\r\n      setPaymentsData(data);\r\n    } catch (err) {\r\n      console.error('Error fetching payments data:', err);\r\n    }\r\n  };\r\n\r\n  const fetchDateRangeData = async () => {\r\n    try {\r\n      const url = `${process.env.REACT_APP_API_URL}/payments/report/daterange?startDate=${startDate.format(\r\n        'YYYY-MM-DD'\r\n      )}&endDate=${endDate.format('YYYY-MM-DD')}`;\r\n      const data = await getRequest(url);\r\n      setPaymentsData(data);\r\n    } catch (err) {\r\n      console.error('Error fetching payments data:', err);\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n\r\n    let param;\r\n    const today = dayjs();\r\n    const year = today.year();\r\n    const month = today.month() + 1;\r\n    const date = today.format('YYYY-MM-DD');\r\n    const week = today.isoWeek();\r\n\r\n    switch (newValue) {\r\n      case 0:\r\n        param = date;\r\n        break;\r\n      case 1:\r\n        param = `${year}/${week}`;\r\n        break;\r\n      case 2:\r\n        param = `${year}/${month}`;\r\n        break;\r\n      case 3:\r\n        param = `${year}`;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    fetchPaymentsData(newValue === 0 ? 'daily' : newValue === 1 ? 'weekly' : newValue === 2 ? 'monthly' : 'yearly', param);\r\n  };\r\n\r\n  const generateTotalPaymentsChart = () => {\r\n    return {\r\n      labels: ['Total Payments'],\r\n      datasets: [\r\n        {\r\n          label: 'Total',\r\n          data: [paymentsData.total || 0],\r\n          backgroundColor: ['#3e95cd']\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const generateByTypeChart = () => {\r\n    const byType = paymentsData.byType || {};\r\n    const labels = Object.keys(byType);\r\n    const values = Object.values(byType);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Payments by Type',\r\n          data: values,\r\n          backgroundColor: labels.map(() => '#8e5ea2')\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const generateByPaymentModeChart = () => {\r\n    const byPayment = paymentsData.byPaymentMode || {};\r\n    const labels = Object.keys(byPayment);\r\n    const values = Object.values(byPayment);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'By Payment Mode',\r\n          data: values,\r\n          backgroundColor: labels.map(() => '#3cba9f')\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const generateByCreditOrNotChart = () => {\r\n    const byPayment = paymentsData.isCredit || {};\r\n    const labels = Object.keys(byPayment);\r\n    const values = Object.values(byPayment);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Credit vs Regular',\r\n          data: values,\r\n          backgroundColor: labels.map(() => '#cdc741')\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Payments Report\">\r\n      <Grid container spacing={2}>\r\n        {/* Date Range Picker */}\r\n        <Grid item lg={5} md={5} sm={5} xs={5}>\r\n          <DatePicker label=\"Start Date\" value={startDate} onChange={(newValue) => setStartDate(newValue)} />\r\n        </Grid>\r\n        <Grid item lg={5} md={5} sm={5} xs={5}>\r\n          <DatePicker label=\"End Date\" value={endDate} onChange={(newValue) => setEndDate(newValue)} />\r\n        </Grid>\r\n        <Grid item lg={2} md={2} sm={2} xs={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              fetchDateRangeData();\r\n            }}\r\n          >\r\n            Get Payments\r\n          </Button>\r\n        </Grid>\r\n        {/* Tabs for predefined filters */}\r\n        <Grid item lg={12} md={12} sm={12} xs={12}>\r\n          <Typography variant=\"h2\">Payments</Typography>\r\n          <Tabs value={tabValue} onChange={handleTabChange}>\r\n            <Tab label=\"Daily\" />\r\n            <Tab label=\"Weekly\" />\r\n            <Tab label=\"Monthly\" />\r\n            <Tab label=\"Yearly\" />\r\n          </Tabs>\r\n        </Grid>\r\n\r\n        {/* Chart */}\r\n        <Grid item xs={4} md={4}>\r\n          <Typography variant=\"h6\">Total Payments</Typography>\r\n          <Doughnut data={generateTotalPaymentsChart()} />\r\n        </Grid>\r\n        <Grid item xs={12} md={8}>\r\n          <Typography variant=\"h6\">By Type</Typography>\r\n          <Bar data={generateByTypeChart()} />\r\n        </Grid>\r\n        <Grid item xs={12} md={12}>\r\n          <Typography variant=\"h6\">By Payment Mode</Typography>\r\n          <Bar data={generateByPaymentModeChart()} />\r\n        </Grid>\r\n        <Grid item xs={12} md={12}>\r\n          <Typography variant=\"h6\">Credit vs Regular payments</Typography>\r\n          <Bar data={generateByCreditOrNotChart()} />\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default PaymentsReports;\r\n"],"names":["dayjs","isoWeek","ChartJS","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","PaymentsReports","paymentsData","setPaymentsData","useState","tabValue","setTabValue","startDate","setStartDate","subtract","endDate","setEndDate","useEffect","fetchPaymentsData","format","async","type","param","url","data","getRequest","err","console","error","_jsx","MainCard","title","children","_jsxs","Grid","container","spacing","item","lg","md","sm","xs","DatePicker","label","value","onChange","newValue","Button","variant","color","onClick","fetchDateRangeData","Typography","Tabs","handleTabChange","event","today","year","month","date","week","Tab","Doughnut","labels","datasets","total","backgroundColor","Bar","generateByTypeChart","byType","Object","keys","values","map","generateByPaymentModeChart","byPayment","byPaymentMode","generateByCreditOrNotChart","isCredit"],"sourceRoot":""}