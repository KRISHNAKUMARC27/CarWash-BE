{"version":3,"file":"static/js/4213.13fddec6.chunk.js","mappings":"oOAmLA,UA7KsBA,KACpB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAE3BC,GADQC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IACfC,MAAMC,GAAS,CAAC,SAASC,SAASD,MAE9EE,EAAAA,EAAAA,YAAU,KACRC,IACO,KACLX,EAAQ,GAAG,IAEZ,IAEH,MAAMW,EAAyBC,UAC7B,IACE,MAAMb,QAAac,EAAAA,EAAAA,IAA2C,wBAC9Db,EAAQD,EAGV,CAFE,MAAOe,GACPC,QAAQC,MAAMF,EAAIG,QACpB,GA6BIC,GAAUC,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEC,YAAa,eACbC,OAAQ,OACRC,KAAM,IACNC,eAAe,GAGjB,CACEH,YAAa,OACbC,OAAQ,OACRC,KAAM,GACNC,eAAe,GAEjB,CACEH,YAAa,cACbC,OAAQ,UACRC,KAAM,IACNE,mCAAoC,CAClCC,KAAM,SAGV,CACEL,YAAa,eACbC,OAAQ,WACRC,KAAM,IACNE,mCAAoC,CAClCC,KAAM,SAGV,CACEL,YAAa,eACbC,OAAQ,gBACRC,KAAM,GACNC,eAAe,GAEjB,CACEH,YAAa,YACbC,OAAQ,QACRC,KAAM,IACNE,mCAAoC,CAClCE,QAAQ,EACRC,SAAU,CAAC,OAAQ,OAAQ,SAAU,SAAU,UAAUC,KAAKC,IAC5DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAAcC,MAAkB,SAAXH,EAAoB,KAAOA,EAAOF,SAClD,SAAXE,EAAoB,OAASA,GADjBA,SAOvB,IAGII,GAAcC,EAAAA,EAAAA,KAEdC,GAAahB,EAAAA,EAAAA,UACjB,KACEiB,EAAAA,EAAAA,GAAY,CACVC,QAAS,CACPC,KAAML,EAAYI,QAAQC,KAC1BC,QAASN,EAAYI,QAAQG,UAC7BC,KAAM,CACJC,KAAM,kBAERC,WAAY,CACVC,QAAS,qBAObC,WAAY,CACVC,OAAQ,CACNC,cAAe,OACfC,SAAU,WAGdC,WAAY,CACVC,WAAY,CACVC,eAAgB,CACdC,QAAS,CACPJ,SAAU,YAIhBK,UAAW,CACTF,eAAgB,CACdG,MAAO,CACLC,MAAO,cAMnB,CAACtB,IAMH,OACEH,EAAAA,EAAAA,KAAA,OAAAH,UACE6B,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAACC,MAAOvB,EAAWR,SAAA,EAC/BG,EAAAA,EAAAA,KAAC6B,EAAAA,GAAkB,CACjBzC,QAASA,EACTnB,KAAMA,EACN6D,qBAAmB,EACnBC,YAAY,QACZtC,eAAa,EACbuC,mBAAoB,CAClBC,UAAW,EACXC,GAAI,CACFC,aAAc,IAEdtB,WAAa,8CAGjBuB,iBAjJctD,UAA6C,IAAtC,IAAEuD,EAAG,OAAEC,EAAM,gBAAEC,GAAiBC,EAC3D,IAGE,MAAMC,EAAU,IACXJ,EAAIK,YACJJ,GAEL,IAAIlE,EAKF,YADAuE,MAAM,qCAHN1D,QAAQ2D,IAAIvE,KAAKwE,UAAUJ,UACrBK,EAAAA,EAAAA,IAAY,uBAAuDL,GAO3E5D,IAEA0D,GAGF,CAFE,MAAOvD,GACPC,QAAQC,MAAMF,EAAIG,QACpB,KA4HO,QAED,C","sources":["views/attendance/AllAttendance.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport { createTheme, ThemeProvider, useTheme, MenuItem } from '@mui/material';\r\n//import { gridSpacing } from 'store/constant';\r\nimport { getRequest, putRequest } from 'utils/fetchRequest';\r\n\r\nconst AllAttendance = () => {\r\n  const [data, setData] = useState([]);\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n  const isAuthorizedForAttendanceEdit = roles.some((role) => ['ADMIN'].includes(role));\r\n\r\n  useEffect(() => {\r\n    fetchAllAttendanceData();\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllAttendanceData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/employee/attendance');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleSaveRow = async ({ row, values, exitEditingMode }) => {\r\n    try {\r\n      // assuming your backend expects something like:\r\n      // { employeeId, date, checkInTime, checkOutTime, leaveType }\r\n      const payload = {\r\n        ...row.original, // all original fields (e.g., id, employeeId, date, etc.)\r\n        ...values // overwrite with updated checkInTime, checkOutTime, leaveType\r\n      };\r\n      if (isAuthorizedForAttendanceEdit) {\r\n        console.log(JSON.stringify(payload));\r\n        await putRequest(`${process.env.REACT_APP_API_URL}/employee/attendance`, payload);\r\n      } else {\r\n        alert('Not authorized to edit attendance');\r\n        return;\r\n      }\r\n\r\n      // update local state\r\n      fetchAllAttendanceData();\r\n\r\n      exitEditingMode(); // required to exit editing mode after save\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'employeeName', //access nested data with dot notation\r\n        header: 'Name',\r\n        size: 100,\r\n        enableEditing: false\r\n        // filterVariant: 'multi-select'\r\n      },\r\n      {\r\n        accessorKey: 'date', //normal accessorKey\r\n        header: 'Date',\r\n        size: 50,\r\n        enableEditing: false\r\n      },\r\n      {\r\n        accessorKey: 'checkInTime',\r\n        header: 'In Time',\r\n        size: 100,\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          type: 'time'\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'checkOutTime',\r\n        header: 'Out Time',\r\n        size: 100,\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          type: 'time'\r\n        }\r\n      },\r\n      {\r\n        accessorKey: 'workingHours',\r\n        header: 'Working Hours',\r\n        size: 50,\r\n        enableEditing: false\r\n      },\r\n      {\r\n        accessorKey: 'leaveType',\r\n        header: 'Leave',\r\n        size: 100,\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          select: true,\r\n          children: ['NONE', 'SICK', 'CASUAL', 'EARNED', 'UNPAID'].map((option) => (\r\n            <MenuItem key={option} value={option === 'NONE' ? null : option}>\r\n              {option === 'NONE' ? 'None' : option}\r\n            </MenuItem>\r\n          ))\r\n        }\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#e2d7d5';\r\n  const color2 = '#4f4563';\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          enableFacetedValues\r\n          editingMode=\"modal\"\r\n          enableEditing\r\n          muiTablePaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              borderRadius: '0',\r\n              //backgroundColor: \"#344767\",\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          onEditingRowSave={handleSaveRow}\r\n        />{' '}\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllAttendance;\r\n"],"names":["AllAttendance","data","setData","useState","isAuthorizedForAttendanceEdit","JSON","parse","localStorage","getItem","some","role","includes","useEffect","fetchAllAttendanceData","async","getRequest","err","console","error","message","columns","useMemo","accessorKey","header","size","enableEditing","muiTableBodyCellEditTextFieldProps","type","select","children","map","option","_jsx","MenuItem","value","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","_jsxs","ThemeProvider","theme","MaterialReactTable","enableFacetedValues","editingMode","muiTablePaperProps","elevation","sx","borderRadius","onEditingRowSave","row","values","exitEditingMode","_ref","payload","original","alert","log","stringify","putRequest"],"sourceRoot":""}