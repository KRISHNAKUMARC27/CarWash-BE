{"version":3,"file":"static/js/5277.e885ceb5.chunk.js","mappings":"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","sources":["views/invoice/AllInvoiceReceipt.js","../node_modules/@mui/icons-material/esm/PictureAsPdf.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport { createTheme, ThemeProvider, useTheme, Tooltip, IconButton, Box } from '@mui/material';\r\nimport { PictureAsPdf } from '@mui/icons-material';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\n// project imports\r\nimport { getRequest, getBlobRequest } from 'utils/fetchRequest';\r\n\r\nconst AllInvoiceReceipt = () => {\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMess, setAlertMess] = useState('');\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchInvoiceReceiptData();\r\n\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchInvoiceReceiptData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/invoice/receipt');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const printReceiptPDF = async (receipt) => {\r\n    try {\r\n      const blob = await getBlobRequest(process.env.REACT_APP_API_URL + '/invoice/receiptPdf/' + receipt.id);\r\n      const downloadUrl = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.setAttribute('download', 'Receipt_' + receipt.receiptId + '.pdf'); // Use the filename you wish\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n      setAlertMess('Generated Invoice. Check downloads');\r\n      setShowAlert(true);\r\n    } catch (err) {\r\n      onClose();\r\n      console.log(err.message);\r\n      setAlertMess(err.message);\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'receiptId', //access nested data with dot notation\r\n        header: 'Id',\r\n        size: 50\r\n        //filterVariant: 'multi-select'\r\n      },\r\n      {\r\n        accessorKey: 'amount',\r\n        header: 'Receipt Amt',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'invoiceIdList',\r\n        header: 'Invoice Ids',\r\n        size: 100,\r\n        Cell: ({ row }) => row.original.invoiceIdList?.join(', ') || 'N/A' // Format as comma-separated string\r\n      },\r\n      {\r\n        accessorKey: 'paymentMode',\r\n        header: 'Payment Mode',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'comment', //access nested data with dot notation\r\n        header: 'Comment',\r\n        size: 100\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#e2d7d5';\r\n  const color2 = '#cf8989';\r\n\r\n  return (\r\n    <>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={'info'} alertMess={alertMess} />}\r\n\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          enableFacetedValues\r\n          //editingMode=\"modal\"\r\n          enableEditing\r\n          muiTablePaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              borderRadius: '0',\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          renderRowActions={({ row }) => (\r\n            <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n              <Tooltip arrow placement=\"right\" title=\"Receipt PDF\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    printReceiptPDF(row.original);\r\n                  }}\r\n                >\r\n                  <PictureAsPdf />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n        />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllInvoiceReceipt;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z\"\n}), 'PictureAsPdf');"],"names":["AllInvoiceReceipt","showAlert","setShowAlert","useState","alertMess","setAlertMess","data","setData","useEffect","fetchInvoiceReceiptData","async","getRequest","err","console","error","message","columns","useMemo","accessorKey","header","size","Cell","_ref","_row$original$invoice","row","original","invoiceIdList","join","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","_jsxs","_Fragment","children","_jsx","AlertDialog","alertColor","ThemeProvider","theme","MaterialReactTable","enableFacetedValues","enableEditing","muiTablePaperProps","elevation","sx","borderRadius","renderRowActions","_ref2","Box","display","gap","Tooltip","arrow","placement","title","IconButton","onClick","blob","getBlobRequest","receipt","id","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","setAttribute","receiptId","body","appendChild","click","parentNode","removeChild","onClose","log","printReceiptPDF","PictureAsPdf","createSvgIcon","d"],"sourceRoot":""}