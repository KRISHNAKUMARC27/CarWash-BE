{"version":3,"file":"static/js/2210.243e0c4d.chunk.js","mappings":"yNAyIA,UApIoBA,KAClB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KACRC,IACO,KACLH,EAAQ,GAAG,IAEZ,IAEH,MAAMG,EAAsBC,UAC1B,IACE,MAAML,QAAaM,EAAAA,EAAAA,IAA2C,aAC9DL,EAAQD,EAGV,CAFE,MAAOO,GACPC,QAAQC,MAAMF,EAAIG,QACpB,GAIIC,GAAUC,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEC,YAAa,gBACbC,OAAQ,SACRC,KAAM,KAER,CACEF,YAAa,cACbC,OAAQ,OACRC,KAAM,KAER,CACEF,YAAa,cACbC,OAAQ,OACRC,KAAM,KAER,CACEF,YAAa,WACbC,OAAQ,WACRC,KAAM,IACNC,cAAe,gBAEjB,CACEH,YAAa,kBACbC,OAAQ,KACRC,KAAM,KAER,CACEF,YAAa,gBACbC,OAAQ,wBACRC,KAAM,IACNC,cAAe,SACfC,oBAAqB,CAAC,MAAO,MAC7BC,KAAMC,IAAe,IAAd,KAAEC,GAAMD,EACb,MAAME,EAAQD,EAAKE,WACnB,OAAiB,IAAVD,GAA4B,SAAVA,EAAmB,MAAQ,IAAI,KAI9D,IAGIE,GAAcC,EAAAA,EAAAA,KAEdC,GAAab,EAAAA,EAAAA,UACjB,KACEc,EAAAA,EAAAA,GAAY,CACVC,QAAS,CACPC,KAAML,EAAYI,QAAQC,KAC1BC,QAASN,EAAYI,QAAQG,UAC7BC,KAAM,CACJC,KAAM,kBAERC,WAAY,CACVC,QAAS,qBAObC,WAAY,CACVC,OAAQ,CACNC,cAAe,OACfC,SAAU,WAGdC,WAAY,CACVC,WAAY,CACVC,eAAgB,CACdC,QAAS,CACPJ,SAAU,YAIhBK,UAAW,CACTF,eAAgB,CACdG,MAAO,CACLC,MAAO,cAMnB,CAACtB,IAMH,OACEuB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAACC,MAAO1B,EAAWuB,SAAA,EAC/BF,EAAAA,EAAAA,KAACM,EAAAA,GAAkB,CACjBzC,QAASA,EACTX,KAAMA,EACNqD,qBAAmB,EACnBC,mBAAoB,CAClBC,UAAW,EACXC,GAAI,CACFC,aAAc,IAEdxB,WAAa,gDAGhB,QAEJ,C","sources":["views/financials/AllPayments.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material';\r\nimport { getRequest } from 'utils/fetchRequest';\r\n\r\nconst AllPayments = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAllPaymensData();\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllPaymensData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/payments');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'paymentAmount',\r\n        header: 'Amount',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'paymentDate',\r\n        header: 'Date',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'paymentMode',\r\n        header: 'Mode',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'category',\r\n        header: 'Category',\r\n        size: 100,\r\n        filterVariant: 'multi-select'\r\n      },\r\n      {\r\n        accessorKey: 'categoryFieldId',\r\n        header: 'Id',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'creditPayment',\r\n        header: 'Is Credit Settlement?',\r\n        size: 100,\r\n        filterVariant: 'select',\r\n        filterSelectOptions: ['Yes', 'No'],\r\n        Cell: ({ cell }) => {\r\n          const value = cell.getValue();\r\n          return value === true || value === 'true' ? 'Yes' : 'No';\r\n        }\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#e2d7d5';\r\n  const color2 = '#4f4563';\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          enableFacetedValues\r\n          muiTablePaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              borderRadius: '0',\r\n              //backgroundColor: \"#344767\",\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n        />{' '}\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllPayments;\r\n"],"names":["AllPayments","data","setData","useState","useEffect","fetchAllPaymensData","async","getRequest","err","console","error","message","columns","useMemo","accessorKey","header","size","filterVariant","filterSelectOptions","Cell","_ref","cell","value","getValue","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","_jsx","_Fragment","children","_jsxs","ThemeProvider","theme","MaterialReactTable","enableFacetedValues","muiTablePaperProps","elevation","sx","borderRadius"],"sourceRoot":""}