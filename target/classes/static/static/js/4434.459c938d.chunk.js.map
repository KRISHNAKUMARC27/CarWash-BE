{"version":3,"file":"static/js/4434.459c938d.chunk.js","mappings":"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","sources":["views/spares/AllSpares.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { useMemo, useState, useEffect, lazy } from 'react';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport {\r\n  createTheme,\r\n  ThemeProvider,\r\n  useTheme,\r\n  IconButton,\r\n  Tooltip,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Button\r\n} from '@mui/material';\r\nimport { Edit } from '@mui/icons-material';\r\nimport { gridSpacing } from 'store/constant';\r\nimport Loadable from 'ui-component/Loadable';\r\nimport { getRequest } from 'utils/fetchRequest';\r\n\r\nconst SparesCreate = Loadable(lazy(() => import('views/spares/SparesCreate')));\r\n\r\nconst AllSpares = () => {\r\n  const [data, setData] = useState([]);\r\n  //const [sparesCategoryList, setSparesCategoryList] = useState([]);\r\n  const [sparesDetails, setSparesDetails] = useState({});\r\n  const [sparesUpdateOpen, setSparesUpdateOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllSparesData();\r\n    //fetchAllSparesCategoryListData();\r\n    return () => {\r\n      setData([]);\r\n      //setSparesCategoryList([]);\r\n    };\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    setSparesUpdateOpen(false);\r\n  };\r\n\r\n  const fetchAllSparesData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'category', //access nested data with dot notation\r\n        header: 'Category',\r\n        size: 150,\r\n        filterVariant: 'multi-select'\r\n        //filterSelectOptions: sparesCategoryList\r\n      },\r\n      {\r\n        accessorKey: 'partNumber', //access nested data with dot notation\r\n        header: 'PartNo./Type',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'desc', //normal accessorKey\r\n        header: 'Desc',\r\n        size: 250\r\n      },\r\n      {\r\n        accessorKey: 'qty',\r\n        header: 'Quantity',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'sellRate',\r\n        header: 'Sell Rate',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'cgst',\r\n        header: 'CGST',\r\n        size: 50\r\n      },\r\n      {\r\n        accessorKey: 'amount',\r\n        header: 'Amount',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'purchaseRate',\r\n        header: 'Purchase Rate',\r\n        size: 100\r\n      },\r\n      {\r\n        accessorKey: 'rack',\r\n        header: 'Rack/Bin',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'misc1',\r\n        header: 'Misc 1',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'misc2',\r\n        header: 'Units',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'misc3',\r\n        header: 'MRP',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'minThresh',\r\n        header: 'Min Threshold',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'minThreshDate',\r\n        header: 'Min Threshold Date',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'updateDate',\r\n        header: 'Update Date',\r\n        size: 150\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#e2d7d5';\r\n  const color2 = '#d6763c';\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          enableFacetedValues\r\n          editingMode=\"modal\"\r\n          enableEditing\r\n          muiTablePaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              borderRadius: '0',\r\n              //backgroundColor: \"#344767\",\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          initialState={{\r\n            pagination: { pageSize: 10 } // Set default rows per page to 5\r\n          }}\r\n          renderRowActions={({ row }) => (\r\n            <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n              <Tooltip arrow placement=\"left\" title=\"Update Spares Info\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    setSparesUpdateOpen(false);\r\n                    setSparesDetails(row.original);\r\n                    setSparesUpdateOpen(true);\r\n                  }}\r\n                >\r\n                  <Edit />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n        />{' '}\r\n      </ThemeProvider>\r\n      <br></br>\r\n\r\n      <Dialog open={sparesUpdateOpen} onClose={handleClose} aria-labelledby=\"data-row-dialog-title\" fullWidth maxWidth=\"lg\">\r\n        <DialogContent dividers style={{ backgroundColor: 'white', color: 'black' }}>\r\n          {' '}\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                  <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h2\">{'Updating Spares: ' + sparesDetails.desc}</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <SparesCreate data={sparesDetails} setSparesUpdateOpen={setSparesUpdateOpen} fetchAllSparesData={fetchAllSparesData} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllSpares;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');"],"names":["SparesCreate","Loadable","lazy","AllSpares","data","setData","useState","sparesDetails","setSparesDetails","sparesUpdateOpen","setSparesUpdateOpen","useEffect","fetchAllSparesData","handleClose","async","getRequest","err","console","error","message","columns","useMemo","accessorKey","header","size","filterVariant","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","_jsxs","children","ThemeProvider","theme","_jsx","MaterialReactTable","enableFacetedValues","editingMode","enableEditing","muiTablePaperProps","elevation","sx","borderRadius","initialState","pagination","pageSize","renderRowActions","_ref","row","Box","display","gap","Tooltip","arrow","placement","title","IconButton","onClick","original","Edit","Dialog","open","onClose","fullWidth","maxWidth","DialogContent","dividers","style","backgroundColor","Grid","container","spacing","gridSpacing","item","xs","Divider","Typography","variant","desc","DialogActions","Button","createSvgIcon","d"],"sourceRoot":""}