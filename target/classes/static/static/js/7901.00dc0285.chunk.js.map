{"version":3,"file":"static/js/7901.00dc0285.chunk.js","mappings":"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","sources":["views/invoice/BillPayment.js","../node_modules/@mui/icons-material/esm/AddCircle.js","../node_modules/@mui/icons-material/esm/RemoveCircle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  IconButton,\r\n  Typography\r\n} from '@mui/material';\r\nimport {} from '@mui/material';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { postRequest } from 'utils/fetchRequest';\r\nimport { AddCircle, RemoveCircle } from '@mui/icons-material';\r\n\r\nconst BillPayment = ({ invoice, setInvoice, paymentModes, invoiceCreateOpen, handleClose, setAlertMess, setShowAlert, setAlertColor }) => {\r\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n  const [remainingAmount, setRemainingAmount] = useState(0); // To store remaining amount dynamically\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setRemainingAmount(0);\r\n    };\r\n  }, []);\r\n\r\n  const handlePaymentSplitChange = (index, field, value) => {\r\n    const updatedPaymentSplitList = [...invoice.paymentSplitList];\r\n\r\n    // Update the specific field in the payment split list\r\n    updatedPaymentSplitList[index] = {\r\n      ...updatedPaymentSplitList[index],\r\n      [field]: value\r\n    };\r\n\r\n    // Calculate the pending amount and credit flag\r\n    const totalPaidExcludingCredit = updatedPaymentSplitList\r\n      .filter((split) => split.paymentMode !== 'CREDIT') // Exclude CREDIT payments\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0); // Sum up payment amounts\r\n\r\n    const grandTotal = invoice.grandTotal || 0;\r\n    const pendingAmount = grandTotal - totalPaidExcludingCredit;\r\n\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: updatedPaymentSplitList,\r\n      pendingAmount: pendingAmount > 0 ? pendingAmount : 0, // Ensure non-negative pending amount\r\n      creditFlag: updatedPaymentSplitList.some((split) => split.paymentMode === 'CREDIT') // Set creditFlag if CREDIT is used\r\n    }));\r\n  };\r\n\r\n  const addPaymentSplitRow = () => {\r\n    const grandTotal = invoice.grandTotal || 0;\r\n    const totalPaid = invoice.paymentSplitList.reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const remainingAmount = grandTotal - totalPaid;\r\n\r\n    if (remainingAmount <= 0) {\r\n      alert('No remaining amount to allocate. Please adjust the existing payment splits.');\r\n      return;\r\n    }\r\n\r\n    // Add a new row with the remaining amount prefilled\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: [\r\n        ...prevState.paymentSplitList,\r\n        { paymentAmount: remainingAmount, paymentMode: '' } // Prefill paymentAmount with remaining value\r\n      ]\r\n    }));\r\n  };\r\n\r\n  const removePaymentSplitRow = (index) => {\r\n    const updatedPaymentSplitList = invoice.paymentSplitList.filter((_, i) => i !== index);\r\n    setInvoice((prevState) => ({ ...prevState, paymentSplitList: updatedPaymentSplitList }));\r\n  };\r\n\r\n  const handleOpenConfirmDialog = (remaining) => {\r\n    setRemainingAmount(remaining); // Store remaining amount for context\r\n    setConfirmDialogOpen(true);\r\n  };\r\n\r\n  // Close the confirmation dialog\r\n  const handleCloseConfirmDialog = () => {\r\n    setConfirmDialogOpen(false);\r\n  };\r\n\r\n  // Handle user confirmation (Yes to add CREDIT, No to cancel)\r\n  const handleConfirmAddCredit = () => {\r\n    setConfirmDialogOpen(false); // Close confirmation dialog\r\n    // Add remaining amount as CREDIT\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      paymentSplitList: [...prevState.paymentSplitList, { paymentAmount: remainingAmount, paymentMode: 'CREDIT' }],\r\n      pendingAmount: remainingAmount,\r\n      creditFlag: true\r\n    }));\r\n    // handleClose();\r\n    // handleInvoiceSave(); // Proceed with saving the invoice\r\n  };\r\n\r\n  // Handle changes in credit payments\r\n  const handleCreditPaymentChange = (index, field, value) => {\r\n    const updatedCreditPaymentList = [...invoice.creditPaymentList];\r\n\r\n    // Update the specific field in the credit payment list\r\n    updatedCreditPaymentList[index] = {\r\n      ...updatedCreditPaymentList[index],\r\n      [field]: value\r\n    };\r\n\r\n    // Calculate new pending amount\r\n\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: updatedCreditPaymentList\r\n    }));\r\n  };\r\n\r\n  // Add a new credit payment row\r\n  const addCreditPaymentRow = () => {\r\n    const grandTotal = invoice.grandTotal || 0;\r\n    const totalPaid = invoice.paymentSplitList\r\n      .filter((payment) => payment.paymentMode !== 'CREDIT')\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const totalCreditPaid = invoice.creditPaymentList.reduce((sum, cred) => sum + (cred.amount || 0), 0);\r\n    const remainingAmount = grandTotal - totalPaid - totalCreditPaid;\r\n\r\n    if (remainingAmount <= 0) {\r\n      alert('No remaining amount to allocate. Please adjust the existing payment splits.');\r\n      return;\r\n    }\r\n\r\n    // Add a new row with the remaining amount prefilled\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: [\r\n        ...(prevState.creditPaymentList || []), // Safely fallback to an empty array\r\n        { amount: remainingAmount, paymentMode: '', comment: '' } // New credit payment row\r\n      ]\r\n    }));\r\n  };\r\n\r\n  // Remove a credit payment row\r\n  const removeCreditPaymentRow = (index) => {\r\n    const updatedCreditPaymentList = invoice.creditPaymentList.filter((_, i) => i !== index);\r\n\r\n    // Recalculate pendingAmount after removing a row\r\n    const totalCreditPayments = updatedCreditPaymentList.reduce((sum, credit) => sum + (credit.amount || 0), 0);\r\n    const newPendingAmount = (invoice.grandTotal || 0) - totalCreditPayments;\r\n\r\n    setInvoice((prevState) => ({\r\n      ...prevState,\r\n      creditPaymentList: updatedCreditPaymentList,\r\n      pendingAmount: newPendingAmount > 0 ? newPendingAmount : 0,\r\n      creditSettledFlag: newPendingAmount === 0\r\n    }));\r\n  };\r\n\r\n  const handleInvoiceSave = async () => {\r\n    //console.log(invoice);\r\n    if (invoice.grandTotal <= 0) {\r\n      alert('Grant total is 0. Cannot generate bill');\r\n      return;\r\n    }\r\n    const grandTotal = invoice.grandTotal || 0;\r\n    const totalPaid = invoice.paymentSplitList.reduce((sum, split) => sum + (split.paymentAmount || 0), 0);\r\n    const remaining = grandTotal - totalPaid;\r\n\r\n    console.log('REMAINING ' + remaining);\r\n    const hasEmptyPaymentMode = invoice.paymentSplitList.some((split) => !split.paymentMode);\r\n\r\n    if (hasEmptyPaymentMode) {\r\n      alert('Please select a payment mode for all entries.');\r\n      return;\r\n    }\r\n\r\n    if (remaining > 0) {\r\n      // Automatically add CREDIT for the remaining amount\r\n      console.log(\"I'm still open\");\r\n      console.log(invoice);\r\n      handleOpenConfirmDialog(remaining);\r\n      return;\r\n    } else if (remaining < 0) {\r\n      // Show alert if overpayment occurs\r\n      alert('Payment exceeds the grand total. Please adjust the amounts.');\r\n      return;\r\n    }\r\n\r\n    const updatedCreditPaymentList = [...invoice.creditPaymentList];\r\n    const hasEmptyPaymentModeCredit = updatedCreditPaymentList.some((split) => !split.paymentMode);\r\n\r\n    if (hasEmptyPaymentModeCredit) {\r\n      alert('Please select a payment mode for all entries.');\r\n      return;\r\n    }\r\n\r\n    const totalCreditPayments = updatedCreditPaymentList.reduce((sum, credit) => sum + (credit.amount || 0), 0);\r\n\r\n    const updatedPaymentSplitList = [...invoice.paymentSplitList];\r\n\r\n    const totalPaidExcludingCredit = updatedPaymentSplitList\r\n      .filter((split) => split.paymentMode !== 'CREDIT') // Exclude CREDIT payments\r\n      .reduce((sum, split) => sum + (split.paymentAmount || 0), 0); // Sum up payment amounts\r\n\r\n    const newPendingAmount = grandTotal - totalPaidExcludingCredit - totalCreditPayments;\r\n\r\n    console.log('GrandTotal ' + grandTotal);\r\n    console.log('totalPaidExcludingCredit ' + totalPaidExcludingCredit);\r\n    console.log('totalCreditPayments' + totalCreditPayments);\r\n    console.log('newPendingAmount ' + newPendingAmount);\r\n\r\n    const updatedInvoice = {\r\n      ...invoice,\r\n      pendingAmount: newPendingAmount > 0 ? newPendingAmount : 0,\r\n      creditSettledFlag: newPendingAmount > 0 ? false : true\r\n    };\r\n\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/invoice', updatedInvoice);\r\n      setAlertMess('Bill id ' + data.invoiceId + ' saved successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      handleClose();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {invoiceCreateOpen && (\r\n        <Dialog\r\n          open={invoiceCreateOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n          fullWidth\r\n          maxWidth=\"lg\"\r\n        >\r\n          <DialogTitle id=\"scroll-dialog-title\" sx={{ fontSize: '1.0rem' }}>\r\n            Invoice Generation for {invoice.vehicleRegNo}\r\n          </DialogTitle>\r\n\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <br></br>\r\n            <Grid container direction=\"row\" spacing={gridSpacing}>\r\n              <Grid item xs={6}>\r\n                <TextField label=\"Grand Total\" required variant=\"outlined\" value={invoice?.grandTotal || 0} />\r\n              </Grid>\r\n              {invoice.paymentSplitList.map((split, index) => (\r\n                <Grid container item spacing={gridSpacing} key={index} alignItems=\"center\">\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      label=\"Payment Amount\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      required\r\n                      value={split.paymentAmount}\r\n                      onChange={(e) => handlePaymentSplitChange(index, 'paymentAmount', parseFloat(e.target.value) || 0)}\r\n                      type=\"number\"\r\n                      disabled={!!split.paymentDate}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      select\r\n                      label=\"Payment Mode\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      required\r\n                      value={split.paymentMode}\r\n                      disabled={!!split.paymentDate}\r\n                      onChange={(e) => handlePaymentSplitChange(index, 'paymentMode', e.target.value)}\r\n                    >\r\n                      {paymentModes.map((mode) => (\r\n                        <MenuItem key={mode} value={mode}>\r\n                          {mode}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    {index === 0 ? (\r\n                      <IconButton onClick={addPaymentSplitRow} color=\"primary\" disabled={!!split.paymentDate}>\r\n                        <AddCircle />\r\n                      </IconButton>\r\n                    ) : (\r\n                      <IconButton onClick={() => removePaymentSplitRow(index)} color=\"secondary\" disabled={!!split.paymentDate}>\r\n                        <RemoveCircle />\r\n                      </IconButton>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n            <br></br>\r\n            {invoice.creditFlag && (\r\n              <Grid container direction=\"row\" spacing={gridSpacing}>\r\n                <Grid item xs={4}>\r\n                  <Typography variant=\"h4\">Credit Payment</Typography>\r\n                </Grid>\r\n                {(invoice.creditPaymentList || []).map((credit, index) => (\r\n                  <Grid container item spacing={gridSpacing} key={index} alignItems=\"center\">\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        label=\"Credit Amount\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        required\r\n                        value={credit.amount}\r\n                        onChange={(e) => handleCreditPaymentChange(index, 'amount', parseFloat(e.target.value) || 0)}\r\n                        type=\"number\"\r\n                        disabled={!!credit.creditDate}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                      <TextField\r\n                        select\r\n                        label=\"Payment Mode\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        required\r\n                        value={credit.paymentMode}\r\n                        disabled={!!credit.creditDate}\r\n                        onChange={(e) => handleCreditPaymentChange(index, 'paymentMode', e.target.value)}\r\n                      >\r\n                        {paymentModes\r\n                          .filter((mode) => mode !== 'CREDIT') // Exclude \"CREDIT\"\r\n                          .map((mode) => (\r\n                            <MenuItem key={mode} value={mode}>\r\n                              {mode}\r\n                            </MenuItem>\r\n                          ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        label=\"Comment\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={credit.comment || ''}\r\n                        disabled={!!credit.creditDate}\r\n                        onChange={(e) => handleCreditPaymentChange(index, 'comment', e.target.value)}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <IconButton onClick={() => removeCreditPaymentRow(index)} color=\"secondary\" disabled={!!credit.creditDate}>\r\n                        <RemoveCircle />\r\n                      </IconButton>\r\n                    </Grid>\r\n                  </Grid>\r\n                ))}\r\n                <Grid item xs={12}>\r\n                  <Button onClick={addCreditPaymentRow} color=\"primary\" startIcon={<AddCircle />}>\r\n                    Add Credit Payment\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleInvoiceSave} color=\"secondary\">\r\n              Save\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n      {confirmDialogOpen && (\r\n        <Dialog open={confirmDialogOpen} onClose={handleCloseConfirmDialog}>\r\n          <DialogTitle>Confirm Remaining Amount</DialogTitle>\r\n          <DialogContent>\r\n            <p>\r\n              The remaining amount of <b>{remainingAmount}</b> will be added as CREDIT. Do you want to proceed?\r\n            </p>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleConfirmAddCredit} color=\"primary\">\r\n              Yes\r\n            </Button>\r\n            <Button onClick={handleCloseConfirmDialog} color=\"secondary\">\r\n              No\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nBillPayment.propTypes = {\r\n  invoice: PropTypes.object.isRequired,\r\n  setInvoice: PropTypes.func.isRequired,\r\n  paymentModes: PropTypes.array.isRequired,\r\n  invoiceCreateOpen: PropTypes.bool.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  setAlertMess: PropTypes.func.isRequired,\r\n  setShowAlert: PropTypes.func.isRequired,\r\n  setAlertColor: PropTypes.func.isRequired\r\n};\r\nexport default BillPayment;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"\n}), 'RemoveCircle');"],"names":["_ref","invoice","setInvoice","paymentModes","invoiceCreateOpen","handleClose","setAlertMess","setShowAlert","setAlertColor","confirmDialogOpen","setConfirmDialogOpen","useState","remainingAmount","setRemainingAmount","useEffect","handlePaymentSplitChange","index","field","value","updatedPaymentSplitList","paymentSplitList","totalPaidExcludingCredit","filter","split","paymentMode","reduce","sum","paymentAmount","pendingAmount","grandTotal","prevState","creditFlag","some","addPaymentSplitRow","alert","handleCloseConfirmDialog","handleCreditPaymentChange","updatedCreditPaymentList","creditPaymentList","_jsxs","_Fragment","children","Dialog","open","onClose","scroll","fullWidth","maxWidth","DialogTitle","id","sx","fontSize","vehicleRegNo","DialogContent","dividers","_jsx","Grid","container","direction","spacing","gridSpacing","item","xs","TextField","label","required","variant","map","alignItems","onChange","e","parseFloat","target","type","disabled","paymentDate","select","mode","MenuItem","IconButton","onClick","color","AddCircle","_","i","removePaymentSplitRow","RemoveCircle","Typography","credit","amount","creditDate","comment","totalCreditPayments","newPendingAmount","creditSettledFlag","removeCreditPaymentRow","Button","addCreditPaymentRow","payment","cred","startIcon","DialogActions","async","remaining","console","log","handleOpenConfirmDialog","updatedInvoice","data","postRequest","invoiceId","err","message","handleConfirmAddCredit","createSvgIcon","d"],"sourceRoot":""}