{"version":3,"file":"static/js/811.1641f640.chunk.js","mappings":"mQAiIA,UAxHgBA,IAAsH,IAArH,QAAEC,EAAO,WAAEC,EAAU,aAAEC,EAAY,kBAAEC,EAAiB,aAAEC,EAAY,YAAEC,EAAW,aAAEC,EAAY,aAAEC,GAAcR,EAC9H,MAAMS,EAAsBA,CAACC,EAAOC,KAClC,MAAMC,EAAc,IAAKX,EAAS,CAACS,GAAQC,GAC3CT,EAAWU,EAAY,EA0BzB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGX,IACCY,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,KAAMd,EACNe,QAASb,EACTc,OAAQ,QACR,kBAAgB,sBAChB,mBAAiB,4BACjBC,WAAS,EACTC,SAAS,KAAIP,SAAA,EAEbC,EAAAA,EAAAA,MAACO,EAAAA,EAAW,CAACC,GAAG,sBAAsBC,GAAI,CAAEC,SAAU,UAAWX,SAAA,CAAC,gBAClDV,EAAasB,KAAKC,GAAQA,EAAIC,aAAYC,KAAK,UAG/Dd,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,SAAqB,UAAXZ,OAAmBL,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAACiB,EAAAA,GAAI,CAACC,WAAS,EAACC,MAAI,EAACC,QAASC,EAAAA,GAAaC,WAAW,SAAQvB,SAAA,EAC5DF,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACE,MAAI,EAACI,GAAI,EAAExB,UACfF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,MAAM,YACNC,QAAQ,WACRrB,WAAS,EACTV,MAAOV,EAAQ0C,WAAa,GAC5BC,SAAWC,GAAMpC,EAAoB,YAAaoC,EAAEC,OAAOnC,YAG/DE,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACE,MAAI,EAACI,GAAI,EAAExB,UACfF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,MAAM,gBACNC,QAAQ,WACRrB,WAAS,EACT0B,UAAQ,EACRpC,MAAOV,EAAQ+C,QAAU,EACzBJ,SAAWC,GAAMpC,EAAoB,SAAUwC,WAAWJ,EAAEC,OAAOnC,QAAU,GAC7EuC,KAAK,cAGTrC,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACE,MAAI,EAACI,GAAI,EAAExB,UACfF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRW,QAAM,EACNV,MAAM,eACNC,QAAQ,WACRrB,WAAS,EACT0B,UAAQ,EACRpC,MAAOV,EAAQmD,aAAe,GAC9BR,SAAWC,GAAMpC,EAAoB,cAAeoC,EAAEC,OAAOnC,OAAOI,SAEnE,IAAI,IAAIsC,IAAI,IAAIlD,EAAamD,QAAQC,GAAkB,WAATA,IAAoB,WAAW5B,KAAK4B,IACjF1C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAQ,CAAY7C,MAAO4C,EAAKxC,SAC9BwC,GADYA,UAMrB1C,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACE,MAAI,EAACI,GAAI,EAAExB,UACfF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,MAAM,UACNC,QAAQ,WACRrB,WAAS,EACTV,MAAOV,EAAQwD,SAAW,GAC1Bb,SAAWC,GAAMpC,EAAoB,UAAWoC,EAAEC,OAAOnC,kBAKjEK,EAAAA,EAAAA,MAAC0C,EAAAA,EAAa,CAAA3C,SAAA,EACZF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CAACC,QA3FUC,UAC1B,GAA2B,MAAvB5D,EAAQmD,YAKZ,GAAsB,MAAlBnD,EAAQ+C,QAAkB/C,EAAQ+C,QAAU,EAC9Cc,MAAM,2BAIR,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAA4C,oBAAqB/D,GACpFM,EAAa,cAAgBwD,EAAKvC,GAAK,iBACvChB,GAAa,GACbF,GAKF,CAJE,MAAO2D,GACP1D,EAAa0D,EAAIC,SACjB1D,GAAa,GACbF,GACF,MAlBEwD,MAAM,gCAkBR,EAuE8CK,MAAM,YAAWpD,SAAC,UAGxDF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CAACC,QAAStD,EAAa6D,MAAM,YAAWpD,SAAC,iBAMrD,C","sources":["views/estimate/Receipt.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField, Button, MenuItem } from '@mui/material';\r\nimport {} from '@mui/material';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { postRequest } from 'utils/fetchRequest';\r\n\r\nconst Receipt = ({ receipt, setReceipt, paymentModes, receiptDialogOpen, selectedRows, handleClose, setAlertMess, setShowAlert }) => {\r\n  const handleReceiptChange = (field, value) => {\r\n    const updatedData = { ...receipt, [field]: value };\r\n    setReceipt(updatedData);\r\n  };\r\n\r\n  const handleReceiptSubmit = async () => {\r\n    if (receipt.paymentMode == null) {\r\n      alert('Please select a payment mode.');\r\n      return;\r\n    }\r\n\r\n    if (receipt.amount == null || receipt.amount <= 0) {\r\n      alert('Enter valid amount');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/estimate/receipt', receipt);\r\n      setAlertMess('Receipt No.' + data.id + ' is generated');\r\n      setShowAlert(true);\r\n      handleClose();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setShowAlert(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {receiptDialogOpen && (\r\n        <Dialog\r\n          open={receiptDialogOpen}\r\n          onClose={handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"scroll-dialog-title\"\r\n          aria-describedby=\"scroll-dialog-description\"\r\n          fullWidth\r\n          maxWidth=\"md\"\r\n        >\r\n          <DialogTitle id=\"scroll-dialog-title\" sx={{ fontSize: '1.0rem' }}>\r\n            Receipts for {selectedRows.map((row) => row.estimateId).join(', ')}\r\n          </DialogTitle>\r\n\r\n          <DialogContent dividers={scroll === 'paper'}>\r\n            <br></br>\r\n            <Grid container item spacing={gridSpacing} alignItems=\"center\">\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"ReceiptTo\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  value={receipt.ownerName || ''}\r\n                  onChange={(e) => handleReceiptChange('ownerName', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Credit Amount\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  required\r\n                  value={receipt.amount || 0}\r\n                  onChange={(e) => handleReceiptChange('amount', parseFloat(e.target.value) || 0)}\r\n                  type=\"number\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  select\r\n                  label=\"Payment Mode\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  required\r\n                  value={receipt.paymentMode || ''}\r\n                  onChange={(e) => handleReceiptChange('paymentMode', e.target.value)}\r\n                >\r\n                  {[...new Set([...paymentModes.filter((mode) => mode !== 'CREDIT'), 'MULTI'])].map((mode) => (\r\n                    <MenuItem key={mode} value={mode}>\r\n                      {mode}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Comment\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  value={receipt.comment || ''}\r\n                  onChange={(e) => handleReceiptChange('comment', e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleReceiptSubmit} color=\"secondary\">\r\n              Save\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"secondary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nReceipt.propTypes = {\r\n  receipt: PropTypes.object.isRequired,\r\n  setReceipt: PropTypes.func.isRequired,\r\n  paymentModes: PropTypes.array.isRequired,\r\n  receiptDialogOpen: PropTypes.bool.isRequired,\r\n  selectedRows: PropTypes.array.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  setAlertMess: PropTypes.func.isRequired,\r\n  setShowAlert: PropTypes.func.isRequired\r\n};\r\nexport default Receipt;\r\n"],"names":["_ref","receipt","setReceipt","paymentModes","receiptDialogOpen","selectedRows","handleClose","setAlertMess","setShowAlert","handleReceiptChange","field","value","updatedData","_jsx","_Fragment","children","_jsxs","Dialog","open","onClose","scroll","fullWidth","maxWidth","DialogTitle","id","sx","fontSize","map","row","estimateId","join","DialogContent","dividers","Grid","container","item","spacing","gridSpacing","alignItems","xs","TextField","label","variant","ownerName","onChange","e","target","required","amount","parseFloat","type","select","paymentMode","Set","filter","mode","MenuItem","comment","DialogActions","Button","onClick","async","alert","data","postRequest","err","message","color"],"sourceRoot":""}