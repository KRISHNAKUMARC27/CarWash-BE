{"version":3,"file":"static/js/724.33540f3f.chunk.js","mappings":"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","sources":["views/job/JobSparesUpdate.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Grid } from '@mui/material';\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  Autocomplete,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n//import { gridSpacing } from 'store/constant';\r\nimport { getRequest, postRequest } from 'utils/fetchRequest';\r\n\r\nconst JobSparesUpdate = ({ data, updateData }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm')); // Check for small screens\r\n\r\n  const [sparesCategoryList, setSparesCategoryList] = React.useState([]);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [allSpares, setAllSpares] = React.useState([]);\r\n\r\n  const discountRole = ['ADMIN'];\r\n\r\n  // Get logged-in user's roles\r\n  const roles = JSON.parse(localStorage.getItem('roles')) || [];\r\n\r\n  // Check if user is authorized to see the \"DISCOUNT\" column\r\n  const isAuthorizedForDiscount = roles.some((role) => discountRole.includes(role));\r\n\r\n  React.useEffect(() => {\r\n    fetchAllSparesCategoryListData();\r\n    fetchAllSparesData();\r\n    return () => {\r\n      setSparesCategoryList([]);\r\n      setOptions([]);\r\n      setAllSpares([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllSparesCategoryListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares/sparesCategory');\r\n      setSparesCategoryList(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchAllSparesData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/spares');\r\n      setAllSpares(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const fetchOptions = async (value) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/spares/findSparesInventoryWithFilter', value);\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (sparesId, column, value) => {\r\n    const newRows = [...data];\r\n\r\n    // Find the row based on sparesId\r\n    const rowIndex = newRows.findIndex((row) => row.sparesId === sparesId);\r\n    newRows[rowIndex][column] = value;\r\n    // If the row was newly added (action === 'ADD'), remove it entirely\r\n    if (newRows[rowIndex].action !== 'ADD') {\r\n      newRows[rowIndex].action = 'MODIFY';\r\n    }\r\n\r\n    updateData(newRows); // Update the state\r\n  };\r\n\r\n  // const handleInputChange = (sparesId, column, value) => {\r\n  //   const newRows = data.map((row) =>\r\n  //     row.sparesId === sparesId ? { ...row, [column]: value, action: row.action !== 'ADD' ? 'MODIFY' : row.action } : row\r\n  //   );\r\n  //   updateData(newRows);\r\n  // };\r\n\r\n  // Add new spare rows with action set to ADD\r\n  // const addAdditionalRows = () => {\r\n  //   console.log('Data before add ');\r\n  //   console.log(JSON.stringify(data));\r\n  //   const newRows = [...Array(1)].map(() => ({\r\n  //     sparesId: '',\r\n  //     category: '',\r\n  //     sparesAndLabour: '',\r\n  //     qty: '',\r\n  //     rate: '',\r\n  //     amount: '',\r\n  //     action: 'ADD'\r\n  //   }));\r\n  //   updateData((prevRows) => [...prevRows, ...newRows]);\r\n  //   console.log('Data post Add ');\r\n  //   console.log(JSON.stringify(data));\r\n  // };\r\n\r\n  const addAdditionalRows = () => {\r\n    const newRows = [...Array(1)].map(() => ({\r\n      sparesId: '',\r\n      category: '',\r\n      sparesAndLabour: '',\r\n      qty: '',\r\n      rate: '',\r\n      discount: '',\r\n      amount: '',\r\n      action: 'ADD'\r\n    }));\r\n    updateData((prevRows) => [...prevRows, ...newRows]);\r\n  };\r\n\r\n  // Handle row deletion by marking action as DELETE\r\n  // const handleRowDelete = (rowIndex) => {\r\n  //   const newRows = [...data];\r\n\r\n  //   // If the spare is newly added, just remove the row\r\n  //   if (newRows[rowIndex].action === 'ADD') {\r\n  //     newRows.splice(rowIndex, 1);\r\n  //   } else {\r\n  //     // Otherwise, mark the action as DELETE\r\n  //     newRows[rowIndex].action = 'DELETE';\r\n  //   }\r\n\r\n  //   updateData(newRows);\r\n  // };\r\n\r\n  const handleRowDelete = (sparesId) => {\r\n    const newRows = [...data];\r\n\r\n    // Find the row based on sparesId\r\n    const rowIndex = newRows.findIndex((row) => row.sparesId === sparesId);\r\n\r\n    // If the row was newly added (action === 'ADD'), remove it entirely\r\n    if (newRows[rowIndex].action === 'ADD') {\r\n      newRows.splice(rowIndex, 1); // Remove the row from the array\r\n    } else {\r\n      // Otherwise, mark the row as deleted\r\n      newRows[rowIndex].action = 'DELETE';\r\n    }\r\n\r\n    updateData(newRows); // Update the state\r\n  };\r\n\r\n  const handleCategoryTypeChange = (value) => {\r\n    let myArray = [value];\r\n    const sparesFilter = {\r\n      categoryList: myArray\r\n    };\r\n    fetchOptions(sparesFilter);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MainCard title=\"Job Spares Information\">\r\n        {/* <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={12}> */}\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer>\r\n            <Table style={{ minWidth: isMobile ? '600px' : '1000px' }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ width: '20%' }}>Category</TableCell>\r\n                  <TableCell sx={{ width: '30%' }}>Spares</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Qty</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Rate</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Discount</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Amount</TableCell>\r\n                  <TableCell sx={{ width: '10%' }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data\r\n                  .filter((row) => row.action !== 'DELETE') // Hide rows marked for deletion\r\n                  .map((row) => (\r\n                    <TableRow key={row.sparesId || row.tempId}>\r\n                      <TableCell sx={{ width: '20%' }}>\r\n                        <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                          <InputLabel id=\"demo-simple-select-standard-label\"></InputLabel>\r\n                          <Select\r\n                            fullWidth\r\n                            labelId=\"demo-simple-select-standard-label\"\r\n                            id=\"demo-simple-select-standard-label\"\r\n                            value={row?.category || ''}\r\n                            label=\"Category Type\"\r\n                            sx={{\r\n                              '& .MuiSelect-select': {\r\n                                color: 'black' // Change to your desired color\r\n                              }\r\n                            }}\r\n                            onChange={(e) => {\r\n                              handleCategoryTypeChange(e.target.value);\r\n                              handleInputChange(row.sparesId, 'category', e.target.value);\r\n                            }}\r\n                          >\r\n                            {sparesCategoryList.map((option) => (\r\n                              <MenuItem key={option.id} value={option.category}>\r\n                                {option.category}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '30%' }}>\r\n                        <Autocomplete\r\n                          options={options.filter((option) => !data.some((row) => row.sparesId === option.id))} // Filter out already added spares\r\n                          getOptionLabel={(option) => option.desc}\r\n                          style={{ width: 300 }}\r\n                          //inputValue={row?.sparesAndLabour || ''}\r\n                          //onInputChange={handleInputChangeFilter}\r\n                          //value={row || ''}\r\n                          value={allSpares.find((option) => option.desc === row.sparesAndLabour) || null}\r\n                          isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                          onChange={(event, newValue) => {\r\n                            //console.log('new value is ' + JSON.stringify(newValue));\r\n                            //setChoosenSpares(newValue);\r\n                            handleInputChange(row.sparesId, 'sparesAndLabour', newValue.desc);\r\n                            handleInputChange(row.sparesId, 'rate', newValue.sellRate);\r\n                            handleInputChange(row.sparesId, 'amount', newValue.sellRate * row?.qty - row?.discount || 0);\r\n                            handleInputChange(row.sparesId, 'sparesId', newValue.id);\r\n                          }}\r\n                          renderInput={(params) => <TextField {...params} label=\"Search Spares\" disabled={!!row.sparesId} />}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          value={row?.qty || ''}\r\n                          onChange={(e) => {\r\n                            const val = e.target.value;\r\n                            handleInputChange(row.sparesId, 'qty', val);\r\n                            handleInputChange(row.sparesId, 'amount', val * row?.rate - row?.discount || 0);\r\n                          }}\r\n                          onBlur={(e) => {\r\n                            const val = e.target.value;\r\n                            if (Number(val) <= 0) {\r\n                              alert('Quantity cannot be 0. Please delete the row if you want to remove the spare.');\r\n                              handleInputChange(row.sparesId, 'qty', ''); // Reset the value if needed\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled\r\n                          value={row?.rate || ''}\r\n                          onChange={(e) => handleInputChange(row.sparesId, 'rate', e.target.value)}\r\n                        />\r\n                      </TableCell>\r\n                      {isAuthorizedForDiscount && (\r\n                        <TableCell sx={{ width: '10%' }}>\r\n                          <TextField\r\n                            fullWidth\r\n                            value={row?.discount || ''}\r\n                            onChange={(e) => {\r\n                              const val = Number(e.target.value) || 0;\r\n                              handleInputChange(row.sparesId, 'discount', val);\r\n                              handleInputChange(row.sparesId, 'amount', Number(row?.rate * row?.qty) - val || 0);\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                      )}\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          value={row?.amount || ''}\r\n                          disabled\r\n                          onChange={(e) => handleInputChange(row.sparesId, 'amount', e.target.value)}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell sx={{ width: '10%' }}>\r\n                        <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(row.sparesId)}>\r\n                          Delete\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n        <Grid item xs={12}>\r\n          <br></br>\r\n          <Button variant=\"contained\" color=\"error\" onClick={addAdditionalRows}>\r\n            Add Row\r\n          </Button>\r\n        </Grid>\r\n        {/* </Grid>\r\n        </Grid> */}\r\n      </MainCard>\r\n    </>\r\n  );\r\n};\r\n\r\nJobSparesUpdate.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  updateData: PropTypes.func.isRequired\r\n};\r\nexport default JobSparesUpdate;\r\n"],"names":["_ref","data","updateData","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","sparesCategoryList","setSparesCategoryList","React","options","setOptions","allSpares","setAllSpares","discountRole","isAuthorizedForDiscount","JSON","parse","localStorage","getItem","some","role","includes","fetchAllSparesCategoryListData","fetchAllSparesData","async","getRequest","err","console","log","message","handleInputChange","sparesId","column","value","newRows","rowIndex","findIndex","row","action","handleCategoryTypeChange","postRequest","fetchOptions","categoryList","_jsx","_Fragment","children","_jsxs","MainCard","title","style","overflowX","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","sx","width","TableBody","filter","map","FormControl","variant","m","InputLabel","id","Select","fullWidth","labelId","category","label","color","onChange","e","target","option","MenuItem","Autocomplete","getOptionLabel","desc","find","sparesAndLabour","isOptionEqualToValue","event","newValue","sellRate","qty","discount","renderInput","params","TextField","disabled","val","rate","onBlur","Number","alert","amount","Button","onClick","splice","handleRowDelete","tempId","Grid","item","xs","addAdditionalRows","Array","prevRows"],"sourceRoot":""}