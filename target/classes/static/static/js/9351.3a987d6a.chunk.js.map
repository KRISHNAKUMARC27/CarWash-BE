{"version":3,"file":"static/js/9351.3a987d6a.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Build.js","views/job/JobCardUpdate.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m22.7 19-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z\"\n}), 'Build');","import React, { useMemo, useState, useEffect } from 'react';\r\nimport { lazy } from 'react';\r\n\r\nimport Loadable from 'ui-component/Loadable';\r\nimport { MaterialReactTable } from 'material-react-table';\r\nimport {\r\n  createTheme,\r\n  ThemeProvider,\r\n  useTheme,\r\n  IconButton,\r\n  Tooltip,\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent\r\n} from '@mui/material';\r\nimport { Edit, Build } from '@mui/icons-material';\r\nimport Box from '@mui/material/Box';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nimport JSZip from 'jszip';\r\n\r\nconst JobUserDetails = Loadable(lazy(() => import('views/job/JobUserDetails')));\r\nconst JobCarDetails = Loadable(lazy(() => import('views/job/JobCarDetails')));\r\n//const JobInfo = Loadable(lazy(() => import('views/job/JobInfo')));\r\nconst JobSparesUpdate = Loadable(lazy(() => import('views/job/JobSparesUpdate')));\r\n\r\nconst JobServiceUpdate = Loadable(lazy(() => import('views/job/JobServiceUpdate')));\r\nimport { getRequest, putRequest, postRequest, getRequestMultiPart, postRequestMultiPart } from 'utils/fetchRequest';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\n\r\nconst JobCardUpdate = () => {\r\n  const [data, setData] = useState([]);\r\n  // const [jobInfoOpen, setJobInfoOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [selectedRowJobCard, setSelectedRowJobCard] = useState({});\r\n  const [selectedRowJobSpares, setSelectedRowJobSpares] = useState({});\r\n\r\n  // const [userDetails, setUserDetails] = useState({});\r\n  // const [carDetails, setCarDetails] = useState({});\r\n  const [photos, setPhotos] = useState([]);\r\n  const [zipFile, setZipFile] = useState();\r\n  const [jobInfoUpdateOpen, setJobInfoUpdateOpen] = useState(false);\r\n\r\n  const [jobSparesCost, setJobSparesCost] = useState({});\r\n  const [jobSparesInfo, setJobSparesInfo] = useState(\r\n    [...Array(1)].map(() => ({ sparesId: '', category: '', sparesAndLabour: '', qty: '', rate: '', amount: '', discount: '', action: '' }))\r\n  );\r\n  const [jobServiceInfo, setJobServiceInfo] = useState(\r\n    [...Array(1)].map(() => ({ sparesId: '', category: '', sparesAndLabour: '', qty: '0', rate: '0', amount: '0', discount: '0' }))\r\n  );\r\n  const [jobSparesUpdateOpen, setJobSparesUpdateOpen] = useState(false);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n\r\n  useEffect(() => {\r\n    findAllByJobStatusOpen();\r\n\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (photos.length > 0 || selectedRow.jobId) {\r\n  //     setJobInfoUpdateOpen(true); // Open dialog only after photos are set\r\n  //   }\r\n  // }, [photos, selectedRow]);\r\n\r\n  const findAllByJobStatusOpen = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/jobCard/status/OPEN');\r\n      setData(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const getJobSpares = async (id) => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/jobCard/jobSpares/' + id);\r\n      setSelectedRowJobSpares(data);\r\n      setJobSparesInfo(data.jobSparesInfo);\r\n      setJobServiceInfo(data.jobServiceInfo);\r\n      let sparesCost = {\r\n        totalSparesValue: data.totalSparesValue,\r\n        totalServiceValue: data.totalServiceValue,\r\n        grandTotal: data.grandTotal\r\n      };\r\n      setJobSparesCost(sparesCost);\r\n      setJobSparesUpdateOpen(true);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const updateJobInfo = async (row) => {\r\n    try {\r\n      const zipBlob = await getRequestMultiPart(process.env.REACT_APP_API_URL + '/jobCard/getPhotos/' + row.id);\r\n      console.log('Got zipblob');\r\n      // if (zipBlob) {\r\n      //   const jszip = new JSZip();\r\n      //   const zip = await jszip.loadAsync(zipBlob);\r\n      //   const files = [];\r\n      //   zip.forEach(async (relativePath, file) => {\r\n      //     const fileBlob = await file.async('blob');\r\n      //     files.push(new File([fileBlob], relativePath, { type: 'image/jpeg' }));\r\n      //   });\r\n      //   setPhotos(files); // Initialize photos with unzipped files\r\n      //   console.log('photos are set');\r\n      //   setSelectedRow(row);\r\n      // }\r\n      setZipFile(zipBlob);\r\n      setSelectedRow(row);\r\n      setJobInfoUpdateOpen(true);\r\n    } catch (err) {\r\n      setPhotos([]);\r\n      setSelectedRow(row);\r\n      setJobInfoUpdateOpen(true);\r\n    }\r\n\r\n    // setUserDetails(row);\r\n    // setCarDetails(row);\r\n  };\r\n\r\n  function isUserDetailsComplete() {\r\n    return selectedRow.ownerName && selectedRow.ownerPhoneNumber;\r\n  }\r\n\r\n  function isCarDetailsComplete() {\r\n    return selectedRow.vehicleRegNo && selectedRow.vehicleName;\r\n  }\r\n\r\n  // function isJobInfoComplete() {\r\n  //   console.log(JSON.stringify(jobInfo));\r\n  //   return jobInfo[0].complaints;\r\n  // }\r\n\r\n  function isJobComplete() {\r\n    return isUserDetailsComplete() && isCarDetailsComplete();\r\n  }\r\n\r\n  function isJobSparesUpdateComplete() {\r\n    //return jobSparesInfo[0]?.sparesAndLabour || jobServiceInfo?.[0]?.sparesAndLabour;\r\n    return jobSparesInfo || jobServiceInfo;\r\n  }\r\n\r\n  const submitJobCard = () => {\r\n    updateJobCard(selectedRow);\r\n  };\r\n\r\n  const updateJobCard = async (payload) => {\r\n    try {\r\n      const data = await putRequest(process.env.REACT_APP_API_URL + '/jobCard', payload);\r\n\r\n      if (photos.length === 0) {\r\n        console.log('No photos to upload.');\r\n        setAlertMess('Job Card updated successfully. No photos to upload');\r\n        setAlertColor('success');\r\n        setShowAlert(true);\r\n        handleClose();\r\n        return;\r\n      }\r\n      const zip = new JSZip();\r\n      photos.forEach((photo, index) => {\r\n        console.log(index);\r\n        zip.file(photo.name, photo);\r\n      });\r\n\r\n      const zipBlob = await zip.generateAsync({ type: 'blob' });\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', new File([zipBlob], 'photos.zip', { type: 'application/zip' }));\r\n\r\n      try {\r\n        await postRequestMultiPart(process.env.REACT_APP_API_URL + '/jobCard/uploadPhotos/' + data.id, formData);\r\n        setPhotos([]);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      handleClose();\r\n      setAlertMess(err.message);\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const updateJobSparesInfo = (row) => {\r\n    setSelectedRowJobCard(row);\r\n    getJobSpares(row.id);\r\n  };\r\n\r\n  // function formatPrice(value) {\r\n  //   const number = parseFloat(value);\r\n  //   return isNaN(number) ? value : number.toFixed(2);\r\n  // }\r\n  const handleTotalSparesValueChange = (value) => {\r\n    const updatedData = { ...jobSparesCost, totalSparesValue: value };\r\n    setJobSparesCost(updatedData);\r\n  };\r\n  const handleTotalServiceValueChange = (value) => {\r\n    const updatedData = { ...jobSparesCost, totalServiceValue: value };\r\n    setJobSparesCost(updatedData);\r\n  };\r\n  const handleGrandTotalValueChange = (value) => {\r\n    const updatedData = { ...jobSparesCost, grandTotal: value };\r\n    setJobSparesCost(updatedData);\r\n  };\r\n\r\n  const sumAmounts = (data) => {\r\n    return data\r\n      .filter((row) => row.action !== 'DELETE')\r\n      .reduce((total, currentRow) => {\r\n        // Convert amount to a number in case it's a string, and handle any non-numeric values gracefully\r\n        const amount = Number(currentRow.amount) || 0;\r\n        return total + amount;\r\n      }, 0); // Start with a total of 0\r\n  };\r\n\r\n  const hasEmptyRow = (rows) =>\r\n    rows.some(\r\n      ({ sparesId, category, sparesAndLabour, qty, rate, amount }) => !sparesId || !category || !sparesAndLabour || !qty || !rate || !amount\r\n    );\r\n\r\n  const submitJobSpares = () => {\r\n    if (hasEmptyRow(jobServiceInfo) || hasEmptyRow(jobSparesInfo)) {\r\n      alert('Please fill all required fields in Service or Spares');\r\n      return;\r\n    }\r\n    const totalSparesValue = sumAmounts(jobSparesInfo);\r\n    handleTotalSparesValueChange(totalSparesValue);\r\n    const totalServiceValue = sumAmounts(jobServiceInfo);\r\n    handleTotalServiceValueChange(totalServiceValue);\r\n    const grandTotalValue = totalSparesValue + totalServiceValue;\r\n    handleGrandTotalValueChange(grandTotalValue);\r\n\r\n    const jobSpares = {\r\n      ...selectedRowJobSpares,\r\n      id: selectedRowJobCard.id,\r\n      jobId: selectedRowJobCard.jobId,\r\n      jobSparesInfo: jobSparesInfo,\r\n      jobServiceInfo: jobServiceInfo,\r\n      totalSparesValue: totalSparesValue,\r\n      totalServiceValue: totalServiceValue,\r\n      grandTotal: grandTotalValue\r\n    };\r\n\r\n    updateJobSpares(jobSpares);\r\n  };\r\n\r\n  const updateJobSpares = async (payload) => {\r\n    try {\r\n      await postRequest(process.env.REACT_APP_API_URL + '/jobCard/jobSpares', payload);\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      handleClose();\r\n      setAlertMess(err.message);\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    findAllByJobStatusOpen();\r\n    setPhotos([]);\r\n    setJobInfoUpdateOpen(false);\r\n    setSelectedRow({});\r\n    setJobSparesUpdateOpen(false);\r\n    setSelectedRowJobCard({});\r\n    setJobSparesInfo(\r\n      [...Array(1)].map(() => ({ sparesId: '', category: '', sparesAndLabour: '', qty: '', rate: '', discount: '', amount: '' }))\r\n    );\r\n    setJobServiceInfo(\r\n      [...Array(1)].map(() => ({ sparesId: '', category: '', sparesAndLabour: '', qty: '0', rate: '0', discount: '', amount: '0' }))\r\n    );\r\n    setJobSparesCost({});\r\n  };\r\n\r\n  //should be memoized or stable\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'jobId', //access nested data with dot notation\r\n        header: 'Job Card No.',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'jobStatus', //access nested data with dot notation\r\n        header: 'Status',\r\n        size: 150,\r\n        filterVariant: 'select',\r\n        filterSelectOptions: ['OPEN', 'CLOSED', 'CANCELLED']\r\n      },\r\n      {\r\n        accessorKey: 'ownerName', //access nested data with dot notation\r\n        header: 'Owner Name',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'ownerPhoneNumber', //normal accessorKey\r\n        header: 'Phone',\r\n        size: 200\r\n      },\r\n      {\r\n        accessorKey: 'vehicleRegNo',\r\n        header: 'Reg. No.',\r\n        size: 150\r\n      },\r\n      {\r\n        accessorKey: 'vehicleName',\r\n        header: 'Vehicle Name',\r\n        size: 150\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const globalTheme = useTheme();\r\n\r\n  const tableTheme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode: globalTheme.palette.mode, //let's use the same dark/light mode as the global theme\r\n          primary: globalTheme.palette.secondary, //swap in the secondary color as the primary for the table\r\n          info: {\r\n            main: 'rgb(255,122,0)' //add in a custom color for the toolbar alert background stuff\r\n          },\r\n          background: {\r\n            default: 'rgba(0, 0, 0, 0)' // set background color to fully transparent\r\n            // set background color to transparent\r\n            // globalTheme.palette.mode === \"light\"\r\n            //   ? \"rgb(254,255,244)\" //random light yellow color for the background in light mode\r\n            //   : \"#000\", //pure black table in dark mode for fun\r\n          }\r\n        },\r\n        typography: {\r\n          button: {\r\n            textTransform: 'none', //customize typography styles for all buttons in table by default\r\n            fontSize: '1.2rem'\r\n          }\r\n        },\r\n        components: {\r\n          MuiTooltip: {\r\n            styleOverrides: {\r\n              tooltip: {\r\n                fontSize: '1.1rem' //override to make tooltip font size larger\r\n              }\r\n            }\r\n          },\r\n          MuiSwitch: {\r\n            styleOverrides: {\r\n              thumb: {\r\n                color: 'pink' //change the color of the switch thumb in the columns show/hide menu to pink\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }),\r\n    [globalTheme]\r\n  );\r\n  const gradientAngle = 195;\r\n  const color1 = '#d3d9ae';\r\n  const color2 = '#f3f1e9';\r\n\r\n  function Divider() {\r\n    return (\r\n      <hr\r\n        style={{\r\n          color: '#000000',\r\n          backgroundColor: '#000000',\r\n          height: 1,\r\n          borderColor: '#000000'\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={tableTheme}>\r\n        <MaterialReactTable\r\n          columns={columns}\r\n          data={data}\r\n          //table={table}\r\n          editingMode=\"modal\"\r\n          enableEditing\r\n          muiTablePaperProps={{\r\n            elevation: 0, //change the mui box shadow\r\n            //customize paper styles\r\n            sx: {\r\n              borderRadius: '0',\r\n              //backgroundColor: \"#344767\",\r\n              background: `linear-gradient(${gradientAngle}deg, ${color1}, ${color2})`\r\n            }\r\n          }}\r\n          renderRowActions={({ row }) => (\r\n            <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n              <Tooltip arrow placement=\"left\" title=\"Update Job Info\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    updateJobInfo(row.original);\r\n                  }}\r\n                >\r\n                  <Edit />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Tooltip arrow placement=\"right\" title=\"Update Job Service\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    updateJobSparesInfo(row.original);\r\n                  }}\r\n                >\r\n                  <Build />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n        />{' '}\r\n      </ThemeProvider>\r\n      <br></br>\r\n      <Dialog open={jobInfoUpdateOpen} onClose={handleClose} aria-labelledby=\"data-row-dialog-title\" fullWidth maxWidth=\"lg\">\r\n        <DialogContent dividers style={{ backgroundColor: 'white', color: 'black' }}>\r\n          {' '}\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                  <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h2\">\r\n                    {'Updating JobCard: ' + selectedRow.jobId + ' VehicleNo.: ' + selectedRow.vehicleRegNo}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <JobCarDetails\r\n                    data={selectedRow}\r\n                    updateData={setSelectedRow}\r\n                    photos={photos}\r\n                    updatePhotos={setPhotos}\r\n                    zipFile={zipFile}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <JobUserDetails data={selectedRow} updateData={setSelectedRow} />\r\n                </Grid>\r\n                <Grid item lg={3} md={6} sm={6} xs={12}>\r\n                  {isJobComplete() && (\r\n                    <Button variant=\"contained\" color=\"error\" onClick={submitJobCard}>\r\n                      Update JobCard\r\n                    </Button>\r\n                  )}\r\n                </Grid>\r\n                <Grid item lg={3} md={6} sm={6} xs={12}>\r\n                  <Button variant=\"contained\" color=\"error\" onClick={handleClose}>\r\n                    Cancel UpdateJobInfo\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br></br>\r\n      <Dialog open={jobSparesUpdateOpen} onClose={handleClose} aria-labelledby=\"data-row-dialog-title\" fullWidth maxWidth=\"xl\">\r\n        <DialogContent dividers style={{ backgroundColor: 'white', color: 'black' }}>\r\n          {' '}\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                  <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h2\">\r\n                    {'Updating Spares for JobCard: ' + selectedRowJobCard.jobId + ' VehicleNo.: ' + selectedRowJobCard.vehicleRegNo}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <JobServiceUpdate data={jobServiceInfo} updateData={setJobServiceInfo} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <JobSparesUpdate data={jobSparesInfo} updateData={setJobSparesInfo} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    label=\"Total Service Value\"\r\n                    required\r\n                    variant=\"outlined\"\r\n                    value={jobSparesCost.totalServiceValue || ''}\r\n                    InputProps={{\r\n                      readOnly: true\r\n                    }}\r\n                    //onChange={(e) => handleTotalLabourValueChange(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    label=\"Total Spares Value\"\r\n                    required\r\n                    variant=\"outlined\"\r\n                    value={jobSparesCost.totalSparesValue || ''}\r\n                    InputProps={{\r\n                      readOnly: true\r\n                    }}\r\n                    //onChange={(e) => handleTotalSparesValueChange(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <TextField\r\n                    label=\"Grand Total\"\r\n                    required\r\n                    variant=\"outlined\"\r\n                    value={jobSparesCost.grandTotal || ''}\r\n                    InputProps={{\r\n                      readOnly: true\r\n                    }}\r\n                    //onChange={(e) => handleGrandTotalValueChange(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                {/* <Grid item lg={3} md={6} sm={6} xs={12}>\r\n                  {isJobSparesUpdateComplete() && (\r\n                    <Button variant=\"contained\" color=\"error\" onClick={submitJobSpares}>\r\n                      Update JobSpares\r\n                    </Button>\r\n                  )}\r\n                </Grid>\r\n                <Grid item lg={3} md={6} sm={6} xs={12}>\r\n                  <Button variant=\"contained\" color=\"error\" onClick={handleJobSparesClose}>\r\n                    Cancel Update Spares\r\n                  </Button>\r\n                </Grid> */}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {/* <Button onClick={handleClose}>Close</Button> */}\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item lg={3} md={6} sm={6} xs={12}>\r\n              {isJobSparesUpdateComplete() && (\r\n                <Button variant=\"contained\" color=\"error\" onClick={submitJobSpares}>\r\n                  Update JobSpares\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item lg={3} md={6} sm={6} xs={12}>\r\n              <Button variant=\"contained\" color=\"error\" onClick={handleClose}>\r\n                Cancel Update Spares\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobCardUpdate;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');"],"names":["createSvgIcon","_jsx","d","JobUserDetails","Loadable","lazy","JobCarDetails","JobSparesUpdate","JobServiceUpdate","JobCardUpdate","data","setData","useState","selectedRow","setSelectedRow","selectedRowJobCard","setSelectedRowJobCard","selectedRowJobSpares","setSelectedRowJobSpares","photos","setPhotos","zipFile","setZipFile","jobInfoUpdateOpen","setJobInfoUpdateOpen","jobSparesCost","setJobSparesCost","jobSparesInfo","setJobSparesInfo","Array","map","sparesId","category","sparesAndLabour","qty","rate","amount","discount","action","jobServiceInfo","setJobServiceInfo","jobSparesUpdateOpen","setJobSparesUpdateOpen","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","useEffect","findAllByJobStatusOpen","async","getRequest","err","console","error","message","updateJobCard","putRequest","payload","length","log","handleClose","zip","JSZip","forEach","photo","index","file","name","zipBlob","generateAsync","type","formData","FormData","append","File","postRequestMultiPart","id","updateJobSparesInfo","row","sparesCost","totalSparesValue","totalServiceValue","grandTotal","getJobSpares","sumAmounts","filter","reduce","total","currentRow","Number","hasEmptyRow","rows","some","_ref","updateJobSpares","postRequest","columns","useMemo","accessorKey","header","size","filterVariant","filterSelectOptions","globalTheme","useTheme","tableTheme","createTheme","palette","mode","primary","secondary","info","main","background","default","typography","button","textTransform","fontSize","components","MuiTooltip","styleOverrides","tooltip","MuiSwitch","thumb","color","Divider","style","backgroundColor","height","borderColor","_jsxs","children","ThemeProvider","theme","MaterialReactTable","editingMode","enableEditing","muiTablePaperProps","elevation","sx","borderRadius","renderRowActions","_ref2","Box","display","gap","Tooltip","arrow","placement","title","IconButton","onClick","getRequestMultiPart","updateJobInfo","original","Edit","Build","Dialog","open","onClose","fullWidth","maxWidth","DialogContent","dividers","Grid","container","spacing","gridSpacing","item","xs","Typography","variant","jobId","vehicleRegNo","updateData","updatePhotos","lg","md","sm","ownerName","ownerPhoneNumber","vehicleName","Button","submitJobCard","DialogActions","TextField","label","required","value","InputProps","readOnly","submitJobSpares","alert","updatedData","handleTotalSparesValueChange","handleTotalServiceValueChange","grandTotalValue","handleGrandTotalValueChange","jobSpares","AlertDialog"],"sourceRoot":""}