{"version":3,"file":"static/js/2509.c5885b07.chunk.js","mappings":"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","sources":["views/employee/Department.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button, TextField, Grid, IconButton, Tooltip } from '@mui/material';\r\nimport { Edit, Delete } from '@mui/icons-material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport AlertDialog from 'views/utilities/AlertDialog';\r\nimport { getRequest, deleteRequest, postRequest, putRequestNotStringify } from 'utils/fetchRequest';\r\n\r\nfunction Department() {\r\n  const [department, setDepartment] = useState({});\r\n  const [departmentList, setDepartmentList] = useState([]);\r\n\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n  const [alertMess, setAlertMess] = React.useState('');\r\n  const [alertColor, setAlertColor] = React.useState('');\r\n  const [editRowIndex, setEditRowIndex] = useState(null);\r\n  useEffect(() => {\r\n    fetchAllDepartmentListData();\r\n\r\n    return () => {\r\n      setDepartment({});\r\n      setDepartmentList([]);\r\n    };\r\n  }, []);\r\n\r\n  const fetchAllDepartmentListData = async () => {\r\n    try {\r\n      const data = await getRequest(process.env.REACT_APP_API_URL + '/employee/department');\r\n      const enhancedData = data.map((item) => ({\r\n        ...item,\r\n        _originalDepartment: item.departmentName\r\n      }));\r\n      setDepartmentList(enhancedData);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function isDepartmentComplete() {\r\n    return department.departmentName;\r\n  }\r\n\r\n  const submitDepartment = () => {\r\n    const departmentObj = {\r\n      departmentName: department.departmentName\r\n    };\r\n    saveDepartment(departmentObj);\r\n  };\r\n\r\n  const saveDepartment = async (payload) => {\r\n    try {\r\n      const data = await postRequest(process.env.REACT_APP_API_URL + '/employee/department', payload);\r\n      setAlertMess('Department ' + data.departmentName + ' created successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setDepartment({});\r\n      fetchAllDepartmentListData();\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleDepartmentChange = (event) => {\r\n    const updatedData = { ...department, departmentName: event.target.value };\r\n    setDepartment(updatedData);\r\n  };\r\n\r\n  const handleRowDelete = async (rowIndex) => {\r\n    try {\r\n      const data = await deleteRequest(process.env.REACT_APP_API_URL + '/employee/department/' + rowIndex);\r\n      setAlertMess('Department ' + data.category + ' deleted successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      fetchAllDepartmentListData();\r\n    } catch (err) {\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (newValue, index, column) => {\r\n    const updatedRows = [...departmentList];\r\n    updatedRows[index][column] = newValue;\r\n    setDepartmentList(updatedRows);\r\n    setEditRowIndex(index); // mark which row is being edited\r\n  };\r\n\r\n  const updateDepartment = async () => {\r\n    if (editRowIndex === null) return;\r\n\r\n    const oldDepartment = departmentList[editRowIndex]._originalDepartment || '';\r\n    const newDepartment = departmentList[editRowIndex].departmentName;\r\n    try {\r\n      const data = await putRequestNotStringify(\r\n        process.env.REACT_APP_API_URL + '/employee/department/' + oldDepartment + '/' + newDepartment,\r\n        {}\r\n      );\r\n      setAlertMess('Department ' + data.category + ' updated successfully');\r\n      setAlertColor('success');\r\n      setShowAlert(true);\r\n      setEditRowIndex(null); // reset the edit row index\r\n      fetchAllDepartmentListData();\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      setAlertMess(err.message);\r\n      setAlertColor('info');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainCard title=\"Department Details\">\r\n        <Grid container direction=\"row\" spacing={gridSpacing}>\r\n          <Grid item xs={4}>\r\n            <br></br>\r\n            <TextField\r\n              label=\"Department Name\"\r\n              required\r\n              variant=\"outlined\"\r\n              value={department.departmentName || ''}\r\n              onChange={handleDepartmentChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <br></br>\r\n            <div className=\"content\">\r\n              {isDepartmentComplete() && (\r\n                <Button variant=\"contained\" color=\"error\" onClick={() => submitDepartment()}>\r\n                  Create New Department\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n              <div style={{ overflowX: 'auto' }}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Department</TableCell>\r\n                      <TableCell>Department Count</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {departmentList.map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        {/* <TableCell>{row?.category}</TableCell> */}\r\n                        <TableCell>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            value={row?.departmentName || ''}\r\n                            onChange={(e) => handleInputChange(e.target.value, index, 'departmentName')}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>{row?.laborCount}</TableCell>\r\n                        <TableCell>\r\n                          {/* <Button variant=\"contained\" color=\"error\" onClick={() => handleRowDelete(row.id)}>\r\n                            Delete\r\n                          </Button>\r\n                          <Button variant=\"contained\" color=\"error\" onClick={() => updateLaborCategory()}>\r\n                            Update\r\n                          </Button> */}\r\n                          <Tooltip arrow placement=\"right\" title=\"Update\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                updateDepartment();\r\n                              }}\r\n                            >\r\n                              <Edit />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                handleRowDelete(row.id);\r\n                              }}\r\n                            >\r\n                              <Delete />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      {showAlert && <AlertDialog showAlert={showAlert} setShowAlert={setShowAlert} alertColor={alertColor} alertMess={alertMess} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Department;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');"],"names":["department","setDepartment","useState","departmentList","setDepartmentList","showAlert","setShowAlert","React","alertMess","setAlertMess","alertColor","setAlertColor","editRowIndex","setEditRowIndex","useEffect","fetchAllDepartmentListData","async","enhancedData","getRequest","map","item","_originalDepartment","departmentName","err","console","error","message","saveDepartment","data","postRequest","payload","log","_jsxs","children","_jsx","MainCard","title","Grid","container","direction","spacing","gridSpacing","xs","TextField","label","required","variant","value","onChange","event","updatedData","target","className","Button","color","onClick","submitDepartment","departmentObj","style","overflowX","Table","TableHead","TableRow","TableCell","TableBody","row","index","e","handleInputChange","newValue","column","updatedRows","laborCount","Tooltip","arrow","placement","IconButton","oldDepartment","newDepartment","putRequestNotStringify","category","updateDepartment","Edit","deleteRequest","rowIndex","handleRowDelete","id","Delete","AlertDialog","createSvgIcon","d"],"sourceRoot":""}